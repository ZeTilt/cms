{% extends 'base.html.twig' %}

{% block title %}{{ 'calendar.title'|trans({}, 'events') }}{% endblock %}

{% block body %}
<div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
    <!-- Page Header -->
    <div class="mb-8">
        <div class="flex justify-between items-center">
            <div>
                <h1 class="text-4xl font-bold text-gray-900 mb-4">{{ 'calendar.page_title'|trans({}, 'events') }}</h1>
                <p class="text-xl text-gray-600">{{ 'calendar.subtitle'|trans({}, 'events') }}</p>
            </div>
            <div class="flex space-x-3">
                <a href="{{ path('events_index') }}" 
                   class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                    <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                    </svg>
                    {{ 'calendar.list_view'|trans({}, 'events') }}
                </a>
            </div>
        </div>
    </div>

    <!-- Calendar Navigation -->
    <div class="bg-white shadow rounded-lg mb-6">
        <div class="px-6 py-4 border-b border-gray-200">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <button id="prevMonth" class="relative p-2 text-gray-400 hover:text-gray-600">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                        </svg>
                        {% if prevMonthCount > 0 %}
                            <span class="absolute -top-1 -right-1 w-3 h-3 bg-indigo-500 rounded-full"></span>
                        {% endif %}
                    </button>
                    <h2 id="currentMonth" class="text-xl font-semibold text-gray-900"></h2>
                    <button id="nextMonth" class="relative p-2 text-gray-400 hover:text-gray-600">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                        </svg>
                        {% if nextMonthCount > 0 %}
                            <span class="absolute -top-1 -right-1 w-3 h-3 bg-indigo-500 rounded-full"></span>
                        {% endif %}
                    </button>
                </div>
                <div class="flex items-center space-x-2">
                    {% if prevMonthCount > 0 or nextMonthCount > 0 %}
                        <span class="text-xs text-gray-500 mr-2">
                            {% if prevMonthCount > 0 and nextMonthCount > 0 %}
                                {{ prevMonthCount + nextMonthCount }} événements dans les mois adjacents
                            {% elseif prevMonthCount > 0 %}
                                {{ prevMonthCount }} événement{{ prevMonthCount > 1 ? 's' : '' }} le mois précédent
                            {% elseif nextMonthCount > 0 %}
                                {{ nextMonthCount }} événement{{ nextMonthCount > 1 ? 's' : '' }} le mois suivant
                            {% endif %}
                        </span>
                    {% endif %}
                    <button id="todayBtn" class="px-3 py-1 text-sm font-medium text-indigo-600 hover:text-indigo-500">
                        {{ 'calendar.today'|trans({}, 'events') }}
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Calendar Grid -->
        <div class="p-6">
            <div id="calendarGrid" class="grid grid-cols-7 gap-px bg-gray-200 rounded-lg overflow-hidden">
                <!-- Day Headers -->
                <div class="bg-gray-50 py-2 px-3 text-xs font-medium text-gray-500 text-center">Sun</div>
                <div class="bg-gray-50 py-2 px-3 text-xs font-medium text-gray-500 text-center">Mon</div>
                <div class="bg-gray-50 py-2 px-3 text-xs font-medium text-gray-500 text-center">Tue</div>
                <div class="bg-gray-50 py-2 px-3 text-xs font-medium text-gray-500 text-center">Wed</div>
                <div class="bg-gray-50 py-2 px-3 text-xs font-medium text-gray-500 text-center">Thu</div>
                <div class="bg-gray-50 py-2 px-3 text-xs font-medium text-gray-500 text-center">Fri</div>
                <div class="bg-gray-50 py-2 px-3 text-xs font-medium text-gray-500 text-center">Sat</div>
                
                <!-- Calendar Days will be generated by JavaScript -->
            </div>
        </div>
    </div>

    <!-- Event Legend -->
    <div class="bg-white shadow rounded-lg">
        <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">{{ 'calendar.legend_title'|trans({}, 'events') }}</h3>
        </div>
        <div class="px-6 py-4">
            <div class="flex flex-wrap gap-4">
                {% for eventType in eventTypes %}
                <div class="flex items-center">
                    <div class="w-3 h-3 rounded-full mr-2" style="background-color: {{ eventType.color }};"></div>
                    <span class="text-sm text-gray-700">{{ eventType.name }}</span>
                </div>
                {% endfor %}
                <div class="flex items-center">
                    <div class="w-3 h-3 bg-gray-300 rounded-full mr-2"></div>
                    <span class="text-sm text-gray-700">{{ 'calendar.event_type_other'|trans({}, 'events') }}</span>
                </div>
                <div class="flex items-center">
                    <div class="w-3 h-3 bg-indigo-500 rounded-full mr-2"></div>
                    <span class="text-sm text-gray-700">{{ 'calendar.today'|trans({}, 'events') }}</span>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Event Details Modal -->
<div id="eventModal" class="fixed inset-0 z-10 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        
        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="mt-3 text-center sm:mt-0 sm:text-left">
                    <h3 class="text-lg leading-6 font-medium text-gray-900" id="modalTitle">
                        Event Details
                    </h3>
                    <div class="mt-2">
                        <div id="modalContent" class="text-sm text-gray-500">
                            <!-- Event details will be populated here -->
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button type="button" 
                        id="viewEventBtn"
                        class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm">
                    View Event
                </button>
                <button type="button" 
                        onclick="hideEventModal()"
                        class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<script>
// Events data from server
const events = {{ events|json_encode|raw }};
const eventTypes = {{ eventTypes|json_encode|raw }};

// Translations for JavaScript use
const translations = {
    date: "{{ 'javascript.date'|trans({}, 'events') }}",
    time: "{{ 'javascript.time'|trans({}, 'events') }}",
    location: "{{ 'javascript.location'|trans({}, 'events') }}",
    description: "{{ 'javascript.description'|trans({}, 'events') }}",
    capacity: "{{ 'javascript.capacity'|trans({}, 'events') }}",
    status: "{{ 'javascript.status'|trans({}, 'events') }}",
    start: "{{ 'javascript.start'|trans({}, 'events') }}",
    end: "{{ 'javascript.end'|trans({}, 'events') }}",
    max_participants: "{{ 'javascript.max_participants'|trans({}, 'events') }}"
};

// Use URL parameters for month/year, not current date
let currentYear = {{ year }};
let currentMonth = {{ month - 1 }}; // JavaScript months are 0-based

const months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
];

function updateCalendar() {
    const monthYear = `${months[currentMonth]} ${currentYear}`;
    document.getElementById('currentMonth').textContent = monthYear;
    
    renderCalendarDays();
}

function renderCalendarDays() {
    const calendarGrid = document.getElementById('calendarGrid');
    // Remove existing day cells (keep headers)
    const headers = calendarGrid.querySelectorAll('div:nth-child(-n+7)');
    calendarGrid.innerHTML = '';
    headers.forEach(header => calendarGrid.appendChild(header));
    
    const firstDay = new Date(currentYear, currentMonth, 1);
    const lastDay = new Date(currentYear, currentMonth + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());
    
    const endDate = new Date(lastDay);
    endDate.setDate(endDate.getDate() + (6 - lastDay.getDay()));
    
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {
        const dayElement = document.createElement('div');
        dayElement.className = 'bg-white min-h-24 p-2 relative hover:bg-gray-50 cursor-pointer border border-gray-100';
        
        // Click handler for the day
        const currentDateForClick = new Date(date);
        dayElement.onclick = () => viewDayEvents(currentDateForClick);
        
        const dayNumber = document.createElement('div');
        dayNumber.className = 'text-sm font-medium mb-1';
        
        const currentDate = new Date(date);
        currentDate.setHours(0, 0, 0, 0);
        
        if (date.getMonth() !== currentMonth) {
            dayNumber.className += ' text-gray-400';
            dayElement.className += ' bg-gray-50';
        } else {
            dayNumber.className += ' text-gray-900';
        }
        
        if (currentDate.getTime() === today.getTime()) {
            dayNumber.className = dayNumber.className.replace('text-gray-900', 'text-white');
            dayNumber.className += ' bg-indigo-500 rounded-full w-6 h-6 flex items-center justify-center text-xs';
        }
        
        dayNumber.textContent = date.getDate();
        dayElement.appendChild(dayNumber);
        
        // Get events for this day using the improved function
        const dayEvents = getEventsForDay(date);
        
        if (dayEvents.length > 0) {
            // Add event indicator dot
            const eventIndicator = document.createElement('div');
            eventIndicator.className = 'absolute top-1 right-1 w-2 h-2 bg-indigo-500 rounded-full';
            dayElement.appendChild(eventIndicator);
            
            // Show first few events with proper colors
            dayEvents.slice(0, 3).forEach((event, index) => {
                const eventElement = document.createElement('div');
                eventElement.className = `text-xs p-1 mb-1 rounded cursor-pointer truncate ${getEventColor(event.type)} max-w-full`;
                eventElement.textContent = event.title;
                eventElement.title = `${event.title} - Click to view details`; 
                eventElement.onclick = (e) => {
                    e.stopPropagation(); // Prevent day click
                    showEventModal(event);
                };
                dayElement.appendChild(eventElement);
            });
            
            // Show "+" if more events
            if (dayEvents.length > 3) {
                const moreElement = document.createElement('div');
                moreElement.className = 'text-xs text-gray-500 font-medium';
                moreElement.textContent = `+${dayEvents.length - 3} more`;
                dayElement.appendChild(moreElement);
            }
        }
        
        calendarGrid.appendChild(dayElement);
    }
}

function getEventsForDay(date) {
    const calendarDateStr = date.getFullYear() + '-' + 
                           String(date.getMonth() + 1).padStart(2, '0') + '-' + 
                           String(date.getDate()).padStart(2, '0');
    
    const eventsForDay = events.filter(event => {
        // Extract just the date part from the ISO string (YYYY-MM-DD)
        const eventDateStr = event.startDate.substring(0, 10); // "2025-07-30"
        const match = eventDateStr === calendarDateStr;
        
        
        return match;
    });
    
    return eventsForDay;
}

function getEventColor(type) {
    // Find event type configuration
    const eventType = eventTypes.find(et => et.slug === type);
    
    if (eventType) {
        // Convert hex color to Tailwind classes based on the color
        const color = eventType.color;
        switch(color) {
            case '#3B82F6': return 'bg-blue-100 text-blue-800 hover:bg-blue-200';
            case '#10B981': return 'bg-green-100 text-green-800 hover:bg-green-200';
            case '#F59E0B': return 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200';
            case '#EF4444': return 'bg-red-100 text-red-800 hover:bg-red-200';
            default: return 'bg-purple-100 text-purple-800 hover:bg-purple-200';
        }
    }
    
    // Fallback for unknown types
    return 'bg-gray-100 text-gray-800 hover:bg-gray-200';
}

function showEventModal(event) {
    document.getElementById('modalTitle').textContent = event.title;
    
    const content = `
        <div class="space-y-2">
            <p><strong>Type:</strong> ${event.type}</p>
            ${event.startDate ? `<p><strong>${translations.date}:</strong> ${new Date(event.startDate).toLocaleDateString()}</p>` : ''}
            ${event.startDate ? `<p><strong>${translations.time}:</strong> ${new Date(event.startDate).toLocaleTimeString()}</p>` : ''}
            ${event.location ? `<p><strong>${translations.location}:</strong> ${event.location}</p>` : ''}
            ${event.shortDescription ? `<p><strong>${translations.description}:</strong> ${event.shortDescription}</p>` : ''}
            ${event.maxParticipants ? `<p><strong>${translations.capacity}:</strong> ${event.maxParticipants} participants</p>` : ''}
        </div>
    `;
    
    document.getElementById('modalContent').innerHTML = content;
    document.getElementById('viewEventBtn').onclick = () => {
        window.location.href = `/events/${event.slug}`;
    };
    
    document.getElementById('eventModal').classList.remove('hidden');
}

function hideEventModal() {
    document.getElementById('eventModal').classList.add('hidden');
}

function viewDayEvents(date) {
    const dayEvents = getEventsForDay(date);
    const dateStr = date.toISOString().split('T')[0]; // YYYY-MM-DD format
    
    if (dayEvents.length === 0) {
        // No events on this day
        showDayModal(date, []);
    } else if (dayEvents.length === 1) {
        // Only one event, show it directly
        showEventModal(dayEvents[0]);
    } else {
        // Multiple events, show day view
        showDayModal(date, dayEvents);
    }
}

function showDayModal(date, dayEvents) {
    const dateStr = date.toLocaleDateString('fr-FR', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
    });
    
    document.getElementById('modalTitle').textContent = `Événements du ${dateStr}`;
    
    if (dayEvents.length === 0) {
        const content = `
            <div class="text-center py-8">
                <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                <p class="text-gray-500">{{ 'messages.no_events_today'|trans({}, 'events') }}</p>
            </div>
        `;
        document.getElementById('modalContent').innerHTML = content;
        document.getElementById('viewEventBtn').style.display = 'none';
    } else {
        const content = `
            <div class="space-y-4">
                ${dayEvents.map(event => `
                    <div class="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 cursor-pointer" onclick="showEventModal(${JSON.stringify(event).replace(/"/g, '&quot;')})">
                        <div class="flex items-center justify-between mb-2">
                            <h3 class="font-medium text-gray-900">${event.title}</h3>
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getEventColor(event.type)}">${event.type}</span>
                        </div>
                        ${event.startDate ? `<p class="text-sm text-gray-600 mb-1">⏰ ${new Date(event.startDate).toLocaleTimeString('fr-FR', {hour: '2-digit', minute: '2-digit'})}</p>` : ''}
                        ${event.location ? `<p class="text-sm text-gray-600 mb-1">📍 ${event.location}</p>` : ''}
                        ${event.shortDescription ? `<p class="text-sm text-gray-500">${event.shortDescription}</p>` : ''}
                    </div>
                `).join('')}
            </div>
        `;
        document.getElementById('modalContent').innerHTML = content;
        
        // Show "View All Events" button that redirects to events list filtered by date
        const viewAllBtn = document.getElementById('viewEventBtn');
        viewAllBtn.style.display = 'inline-flex';
        viewAllBtn.textContent = '{{ 'actions.view_all_events'|trans({}, 'events') }}';
        viewAllBtn.onclick = () => {
            const dateParam = date.toISOString().split('T')[0];
            window.location.href = `/events?date=${dateParam}`;
        };
    }
    
    document.getElementById('eventModal').classList.remove('hidden');
}

// Navigation event listeners
document.getElementById('prevMonth').addEventListener('click', () => {
    currentMonth--;
    if (currentMonth < 0) {
        currentMonth = 11;
        currentYear--;
    }
    // Reload page with new month parameters
    window.location.href = `/events/calendar/view?year=${currentYear}&month=${currentMonth + 1}`;
});

document.getElementById('nextMonth').addEventListener('click', () => {
    currentMonth++;
    if (currentMonth > 11) {
        currentMonth = 0;
        currentYear++;
    }
    // Reload page with new month parameters
    window.location.href = `/events/calendar/view?year=${currentYear}&month=${currentMonth + 1}`;
});

document.getElementById('todayBtn').addEventListener('click', () => {
    const today = new Date();
    const todayMonth = today.getMonth() + 1; // Convert to 1-based month
    const todayYear = today.getFullYear();
    window.location.href = `/events/calendar/view?year=${todayYear}&month=${todayMonth}`;
});

// Initialize calendar
updateCalendar();
</script>
{% endblock %}