{% extends 'admin/base.html.twig' %}

{% block title %}{{ user.fullName }} - User Management - ZeTilt CMS{% endblock %}

{% block content %}
<div class="w-[95%] mx-auto py-6 px-4 sm:px-6 lg:px-8">
    <div class="mb-6">
        <nav class="flex" aria-label="Breadcrumb">
            <ol role="list" class="flex items-center space-x-4">
                <li>
                    <a href="{{ path('admin_userplus_dashboard') }}" class="text-gray-400 hover:text-gray-500">User Management</a>
                </li>
                <li>
                    <div class="flex items-center">
                        <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        <a href="{{ path('admin_userplus_users') }}" class="ml-4 text-gray-400 hover:text-gray-500">Users</a>
                    </div>
                </li>
                <li>
                    <div class="flex items-center">
                        <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        <span class="ml-4 text-sm font-medium text-gray-500">{{ user.fullName }}</span>
                    </div>
                </li>
            </ol>
        </nav>
        <h1 class="mt-2 text-3xl font-bold text-gray-900">{{ user.fullName }}</h1>
    </div>
    
    <div class="bg-white shadow rounded-lg p-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <h3 class="text-lg font-medium text-gray-900 mb-4">User Information</h3>
                <dl class="space-y-3">
                    <div>
                        <dt class="text-sm font-medium text-gray-500">Email</dt>
                        <dd class="text-sm text-gray-900">{{ user.email }}</dd>
                    </div>
                    <div>
                        <dt class="text-sm font-medium text-gray-500">Full Name</dt>
                        <dd class="text-sm text-gray-900">{{ user.fullName }}</dd>
                    </div>
                    <div>
                        <dt class="text-sm font-medium text-gray-500">Status</dt>
                        <dd class="text-sm">
                            {% if user.active %}
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">Active</span>
                            {% else %}
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">Inactive</span>
                            {% endif %}
                        </dd>
                    </div>
                    <div>
                        <dt class="text-sm font-medium text-gray-500">User Type</dt>
                        <dd class="text-sm">
                            {% if user.userType %}
                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium {{ user.userType.badgeColor }}">
                                    {{ user.userType.displayName }}
                                </span>
                            {% else %}
                                <span class="text-gray-400">No type assigned</span>
                            {% endif %}
                        </dd>
                    </div>
                    <div>
                        <dt class="text-sm font-medium text-gray-500">Created</dt>
                        <dd class="text-sm text-gray-900">{{ user.createdAt|date('F j, Y g:i A') }}</dd>
                    </div>
                </dl>
            </div>
            
            <div>
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-medium text-gray-900">User Attributes</h3>
                    {% if attributeDefinitions|length > 0 %}
                        <button type="button" onclick="toggleEditMode()" id="editButton"
                                class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                            <svg class="-ml-0.5 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                            </svg>
                            <span id="editButtonText">Edit Attributes</span>
                        </button>
                    {% endif %}
                </div>
                
                {% if attributeDefinitions|length > 0 %}
                    <!-- View Mode -->
                    <div id="viewMode" class="space-y-4">
                        {% for definition in attributeDefinitions %}
                            {% set value = userAttributes[definition.attributeName] ?? null %}
                            <div class="border border-gray-200 rounded-lg p-3">
                                <div class="flex items-center justify-between mb-2">
                                    <h4 class="text-sm font-medium text-gray-900">{{ definition.displayName }}</h4>
                                    {% if definition.required %}
                                        <span class="text-xs text-red-600">Required</span>
                                    {% endif %}
                                </div>
                                <div class="text-sm text-gray-900">
                                    {% if definition.attributeType == 'select' and value %}
                                        {% set options = definition.options %}
                                        {{ options[value] ?? value }}
                                    {% elseif definition.attributeType == 'boolean' and value is not null %}
                                        {{ value == '1' ? 'Yes' : 'No' }}
                                    {% elseif definition.attributeType == 'date' and value %}
                                        {{ value|date('F j, Y') }}
                                    {% elseif definition.attributeType == 'file' and value %}
                                        <div class="flex items-center space-x-2">
                                            <svg class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                            </svg>
                                            <a href="{{ value }}" target="_blank" class="text-indigo-600 hover:text-indigo-900 text-sm">
                                                {{ value|split('/')|last }}
                                            </a>
                                        </div>
                                    {% elseif value %}
                                        {{ value }}
                                    {% else %}
                                        <span class="text-gray-400 italic">Not set</span>
                                    {% endif %}
                                </div>
                                {% if definition.description %}
                                    <p class="text-xs text-gray-500 mt-1">{{ definition.description }}</p>
                                {% endif %}
                            </div>
                        {% endfor %}
                    </div>
                    
                    <!-- Edit Mode -->
                    <div id="editMode" class="hidden">
                        <form id="attributesForm" class="space-y-4" enctype="multipart/form-data">
                            {% for definition in attributeDefinitions %}
                                {% set currentValue = userAttributes[definition.attributeName] ?? '' %}
                                <div class="border border-gray-200 rounded-lg p-4">
                                    <div class="flex items-center justify-between mb-3">
                                        <label for="attr_{{ definition.attributeName }}" class="text-sm font-medium text-gray-900">
                                            {{ definition.displayName }}
                                        </label>
                                        {% if definition.required %}
                                            <span class="text-xs text-red-600">Required</span>
                                        {% endif %}
                                    </div>
                                    
                                    {% if definition.attributeType == 'text' %}
                                        <input type="text" 
                                               id="attr_{{ definition.attributeName }}" 
                                               name="attributes[{{ definition.attributeName }}]"
                                               value="{{ currentValue }}"
                                               {{ definition.required ? 'required' : '' }}
                                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                                    
                                    {% elseif definition.attributeType == 'textarea' %}
                                        <textarea id="attr_{{ definition.attributeName }}" 
                                                  name="attributes[{{ definition.attributeName }}]"
                                                  rows="3"
                                                  {{ definition.required ? 'required' : '' }}
                                                  class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">{{ currentValue }}</textarea>
                                    
                                    {% elseif definition.attributeType == 'number' %}
                                        <input type="number" 
                                               id="attr_{{ definition.attributeName }}" 
                                               name="attributes[{{ definition.attributeName }}]"
                                               value="{{ currentValue }}"
                                               {{ definition.required ? 'required' : '' }}
                                               step="any"
                                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                                    
                                    {% elseif definition.attributeType == 'boolean' %}
                                        <select id="attr_{{ definition.attributeName }}" 
                                                name="attributes[{{ definition.attributeName }}]"
                                                {{ definition.required ? 'required' : '' }}
                                                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                                            <option value="">{{ 'common.messages.not_set'|trans({}, 'admin') }}</option>
                                            <option value="1" {{ currentValue == '1' ? 'selected' : '' }}>Yes</option>
                                            <option value="0" {{ currentValue == '0' ? 'selected' : '' }}>No</option>
                                        </select>
                                    
                                    {% elseif definition.attributeType == 'date' %}
                                        <input type="date" 
                                               id="attr_{{ definition.attributeName }}" 
                                               name="attributes[{{ definition.attributeName }}]"
                                               value="{{ currentValue }}"
                                               {{ definition.required ? 'required' : '' }}
                                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                                    
                                    {% elseif definition.attributeType == 'select' %}
                                        <select id="attr_{{ definition.attributeName }}" 
                                                name="attributes[{{ definition.attributeName }}]"
                                                {{ definition.required ? 'required' : '' }}
                                                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                                            {% if not definition.required %}
                                                <option value="">{{ 'common.messages.not_set'|trans({}, 'admin') }}</option>
                                            {% endif %}
                                            {% if definition.options %}
                                                {% for option in definition.options %}
                                                    <option value="{{ option }}" {{ currentValue == option ? 'selected' : '' }}>
                                                        {{ option }}
                                                    </option>
                                                {% endfor %}
                                            {% endif %}
                                        </select>
                                    
                                    {% elseif definition.attributeType == 'file' %}
                                        <div class="space-y-3">
                                            {% if currentValue %}
                                                <div class="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                                                    <div class="flex items-center space-x-2">
                                                        <svg class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                                        </svg>
                                                        <span class="text-sm text-gray-700">{{ currentValue|split('/')|last }}</span>
                                                        <a href="{{ currentValue }}" target="_blank" class="text-indigo-600 hover:text-indigo-900 text-xs">View</a>
                                                    </div>
                                                    <button type="button" onclick="clearFileInput('{{ definition.attributeName }}')" class="text-red-600 hover:text-red-900 text-xs">Remove</button>
                                                </div>
                                            {% endif %}
                                            <input type="file" 
                                                   id="attr_{{ definition.attributeName }}" 
                                                   name="file_uploads[{{ definition.attributeName }}]"
                                                   {{ definition.required and not currentValue ? 'required' : '' }}
                                                   class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100">
                                            <input type="hidden" 
                                                   id="attr_{{ definition.attributeName }}_current" 
                                                   name="attributes[{{ definition.attributeName }}]"
                                                   value="{{ currentValue }}">
                                        </div>
                                    
                                    {% else %}
                                        <input type="text" 
                                               id="attr_{{ definition.attributeName }}" 
                                               name="attributes[{{ definition.attributeName }}]"
                                               value="{{ currentValue }}"
                                               {{ definition.required ? 'required' : '' }}
                                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                                    {% endif %}
                                    
                                    {% if definition.description %}
                                        <p class="text-xs text-gray-500 mt-2">{{ definition.description }}</p>
                                    {% endif %}
                                </div>
                            {% endfor %}
                            
                            <div class="flex justify-end space-x-3 pt-4 border-t">
                                <button type="button" onclick="cancelEdit()"
                                        class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                                    Cancel
                                </button>
                                <button type="submit"
                                        class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700">
                                    Save Changes
                                </button>
                            </div>
                        </form>
                    </div>
                {% else %}
                    <p class="text-gray-500">No custom attributes available.</p>
                {% endif %}
            </div>
        </div>
        
        {% if validationErrors is not empty %}
            <div class="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-md">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                        </svg>
                    </div>
                    <div class="ml-3">
                        <h3 class="text-sm font-medium text-yellow-800">Attribute Validation Issues</h3>
                        <div class="mt-2 text-sm text-yellow-700">
                            <ul class="list-disc list-inside space-y-1">
                                {% for field, errors in validationErrors %}
                                    {% for error in errors %}
                                        <li>{{ field }}: {{ error }}</li>
                                    {% endfor %}
                                {% endfor %}
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        {% endif %}
    </div>
</div>

<!-- User Certifications Section -->
<div class="mt-8 bg-white shadow rounded-lg">
    <div class="px-6 py-4 border-b border-gray-200">
        <div class="flex justify-between items-center">
            <h2 class="text-lg font-medium text-gray-900">Certifications</h2>
            <button type="button" onclick="showAddCertificationModal({{ user.id }}, '{{ user.username }}')"
                    class="inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">
                <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                Add Certification
            </button>
        </div>
    </div>
    
    <div class="px-6 py-4">
        {% set userCertifications = user.userCertifications ?? [] %}
        {% if userCertifications|length > 0 %}
            <div class="space-y-4">
                {% for userCertification in userCertifications %}
                    <div class="border border-gray-200 rounded-lg p-4">
                        <div class="flex items-center justify-between">
                            <div class="flex-1">
                                <div class="flex items-center space-x-3">
                                    <h3 class="text-sm font-medium text-gray-900">{{ userCertification.certification.name }}</h3>
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                        Level {{ userCertification.certification.level }}
                                    </span>
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium {{ userCertification.statusColor }}">
                                        {{ userCertification.validityStatus }}
                                    </span>
                                </div>
                                
                                <div class="mt-2 grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-600">
                                    <div>
                                        <span class="font-medium">Obtained:</span> {{ userCertification.obtainedAt|date('M j, Y') }}
                                    </div>
                                    {% if userCertification.expiresAt %}
                                        <div>
                                            <span class="font-medium">Expires:</span> {{ userCertification.expiresAt|date('M j, Y') }}
                                            {% if userCertification.isExpiringSoon %}
                                                <span class="text-orange-600">({{ userCertification.daysUntilExpiration }} days left)</span>
                                            {% endif %}
                                        </div>
                                    {% endif %}
                                    {% if userCertification.certificateNumber %}
                                        <div>
                                            <span class="font-medium">Certificate #:</span> {{ userCertification.certificateNumber }}
                                        </div>
                                    {% endif %}
                                </div>
                                
                                {% if userCertification.issuingAuthority %}
                                    <div class="mt-1 text-sm text-gray-600">
                                        <span class="font-medium">Issuing Authority:</span> {{ userCertification.issuingAuthority }}
                                    </div>
                                {% endif %}
                                
                                {% if userCertification.notes %}
                                    <div class="mt-2 text-sm text-gray-600">
                                        <span class="font-medium">Notes:</span> {{ userCertification.notes }}
                                    </div>
                                {% endif %}
                            </div>
                            
                            <div class="flex items-center space-x-2">
                                <button type="button" onclick="editCertification({{ userCertification.id }})"
                                        class="text-indigo-600 hover:text-indigo-900 text-sm font-medium">
                                    Edit
                                </button>
                                <button type="button" onclick="removeCertification({{ userCertification.id }}, '{{ userCertification.certification.name }}')"
                                        class="text-red-600 hover:text-red-900 text-sm font-medium">
                                    Remove
                                </button>
                            </div>
                        </div>
                    </div>
                {% endfor %}
            </div>
        {% else %}
            <div class="text-center py-8">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">No certifications</h3>
                <p class="mt-1 text-sm text-gray-500">This user has no certifications assigned yet.</p>
                <div class="mt-6">
                    <button type="button" onclick="showAddCertificationModal({{ user.id }}, '{{ user.username }}')"
                            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">
                        <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        Add First Certification
                    </button>
                </div>
            </div>
        {% endif %}
    </div>
</div>

<!-- Include assign type modal -->
{% include 'admin/userplus/modals/assign_type_modal.html.twig' %}

<!-- Add Certification Modal -->
<div id="addCertificationModal" class="fixed inset-0 z-10 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        
        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <form id="addCertificationForm" method="post">
                <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                            <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                                Add Certification
                            </h3>
                            <div class="mt-4 space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Certification</label>
                                    <select name="certification_id" required class="block w-full rounded-md border-gray-300 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                        <option value="">{{ 'common.messages.select_option'|trans({}, 'admin') }}</option>
                                        <!-- Options will be populated by JavaScript -->
                                    </select>
                                </div>
                                
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Date Obtained</label>
                                    <input type="date" name="obtained_at" required
                                           class="block w-full rounded-md border-gray-300 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                </div>
                                
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Expiration Date</label>
                                    <input type="date" name="expires_at"
                                           class="block w-full rounded-md border-gray-300 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                    <p class="text-xs text-gray-500 mt-1">Leave empty if certification doesn't expire</p>
                                </div>
                                
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Certificate Number</label>
                                    <input type="text" name="certificate_number"
                                           class="block w-full rounded-md border-gray-300 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                </div>
                                
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Issuing Authority</label>
                                    <input type="text" name="issuing_authority"
                                           class="block w-full rounded-md border-gray-300 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                </div>
                                
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                                    <textarea name="notes" rows="3"
                                              class="block w-full rounded-md border-gray-300 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm">
                        Add Certification
                    </button>
                    <button type="button" onclick="hideAddCertificationModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
let editMode = false;

function toggleEditMode() {
    if (editMode) {
        // Currently in edit mode, cancel
        cancelEdit();
    } else {
        // Switch to edit mode
        document.getElementById('viewMode').classList.add('hidden');
        document.getElementById('editMode').classList.remove('hidden');
        document.getElementById('editButtonText').textContent = 'Cancel';
        editMode = true;
    }
}

function cancelEdit() {
    document.getElementById('editMode').classList.add('hidden');
    document.getElementById('viewMode').classList.remove('hidden');
    document.getElementById('editButtonText').textContent = 'Edit Attributes';
    
    // Reset form
    document.getElementById('attributesForm').reset();
    
    // Restore original values
    {% if attributeDefinitions %}
    {% for definition in attributeDefinitions %}
        {% set currentValue = userAttributes[definition.attributeName] ?? '' %}
        const field{{ loop.index }} = document.getElementById('attr_{{ definition.attributeName }}');
        if (field{{ loop.index }}) {
            field{{ loop.index }}.value = '{{ currentValue }}';
        }
    {% endfor %}
    {% endif %}
    
    editMode = false;
}

// Handle form submission
document.getElementById('attributesForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    
    // Submit to server with FormData (includes files)
    fetch(`/admin/userplus/users/{{ user.id }}/attributes/save`, {
        method: 'POST',
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        },
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification('Attributes saved successfully', 'success');
            // Reload page to show updated values
            setTimeout(() => {
                location.reload();
            }, 1000);
        } else {
            showNotification(data.message || 'Failed to save attributes', 'error');
            if (data.errors) {
                console.log('Validation errors:', data.errors);
            }
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showNotification('An error occurred while saving attributes', 'error');
    });
});

function clearFileInput(attributeKey) {
    // Clear the file input
    const fileInput = document.getElementById(`attr_${attributeKey}`);
    if (fileInput) {
        fileInput.value = '';
    }
    
    // Clear the hidden input that stores current file path
    const hiddenInput = document.getElementById(`attr_${attributeKey}_current`);
    if (hiddenInput) {
        hiddenInput.value = '';
    }
    
    // Hide the current file display
    const currentFileDiv = fileInput.closest('.space-y-3').querySelector('.bg-gray-50');
    if (currentFileDiv) {
        currentFileDiv.style.display = 'none';
    }
}

function showNotification(message, type) {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 z-50 p-4 rounded-md shadow-lg ${
        type === 'success' ? 'bg-green-100 text-green-800 border border-green-200' : 
        'bg-red-100 text-red-800 border border-red-200'
    }`;
    notification.innerHTML = `
        <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                ${type === 'success' ? 
                    '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>' :
                    '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>'
                }
            </svg>
            <span>${message}</span>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // Remove notification after 3 seconds
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// Certification management functions
function showAddCertificationModal(userId, userName) {
    document.getElementById('addCertificationModal').classList.remove('hidden');
    document.getElementById('addCertificationForm').action = `/admin/userplus/users/${userId}/certifications/add`;
    
    // Load available certifications
    loadAvailableCertifications();
}

function hideAddCertificationModal() {
    document.getElementById('addCertificationModal').classList.add('hidden');
    document.getElementById('addCertificationForm').reset();
}

function loadAvailableCertifications() {
    fetch('/admin/certifications/api/active')
        .then(response => response.json())
        .then(certifications => {
            const select = document.querySelector('#addCertificationForm select[name="certification_id"]');
            select.innerHTML = '<option value="">{{ 'common.messages.select_option'|trans({}, 'admin') }}</option>';
            
            certifications.forEach(cert => {
                const option = document.createElement('option');
                option.value = cert.id;
                option.textContent = `${cert.name} (Level ${cert.level})`;
                if (cert.validityMonths) {
                    option.textContent += ` - Valid for ${cert.validityMonths} months`;
                }
                select.appendChild(option);
            });
        })
        .catch(error => {
            console.error('Error loading certifications:', error);
        });
}

function editCertification(userCertificationId) {
    // TODO: Implement edit functionality
    alert('Edit functionality will be implemented next');
}

function removeCertification(userCertificationId, certificationName) {
    if (confirm(`Are you sure you want to remove the "${certificationName}" certification?`)) {
        fetch(`/admin/userplus/certifications/${userCertificationId}/remove`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload(); // Refresh the page to show updated certifications
            } else {
                alert(data.message || 'Error removing certification');
            }
        })
        .catch(error => {
            console.error('Error removing certification:', error);
            alert('{{ 'common.errors.remove_failed'|trans({}, 'admin') }}');
        });
    }
}

// Handle add certification form submission
document.getElementById('addCertificationForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    
    fetch(this.action, {
        method: 'POST',
        body: formData,
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            location.reload(); // Refresh the page to show the new certification
        } else {
            alert(data.message || 'Error adding certification');
        }
    })
    .catch(error => {
        console.error('Error adding certification:', error);
        alert('{{ 'common.errors.add_failed'|trans({}, 'admin') }}');
    });
});
</script>
{% endblock %}