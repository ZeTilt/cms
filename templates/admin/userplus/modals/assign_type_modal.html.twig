<!-- Assign/Change User Type Modal -->
<div id="assignTypeModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <div class="flex justify-between items-center mb-6">
                <h3 id="assignTypeModalTitle" class="text-lg font-medium text-gray-900">Assign User Type</h3>
                <button type="button" onclick="hideAssignTypeModal()" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <form id="assignTypeForm" class="space-y-4">
                <input type="hidden" id="assign_user_id" name="user_id">
                
                <div>
                    <p id="assignUserName" class="text-sm text-gray-600 mb-4"></p>
                </div>
                
                <div>
                    <label for="user_type_id" class="block text-sm font-medium text-gray-700">User Type</label>
                    <select id="user_type_id" name="user_type_id" required 
                            class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="">Remove Type Assignment</option>
                        {% for userType in userTypes %}
                            <option value="{{ userType.id }}">{{ userType.displayName }}</option>
                        {% endfor %}
                    </select>
                    <p class="mt-1 text-xs text-gray-500">Select a user type or leave empty to remove type assignment</p>
                </div>
                
                <div id="typeWarning" class="hidden p-3 bg-yellow-50 border border-yellow-200 rounded-md">
                    <div class="flex">
                        <svg class="h-5 w-5 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732.5C2.962 1.333 3.924 3 5.464 3z"></path>
                        </svg>
                        <div class="ml-3">
                            <p class="text-sm text-yellow-700">
                                Changing the user type will reset all existing custom attribute values for this user.
                            </p>
                        </div>
                    </div>
                </div>
                
                <div class="flex justify-end space-x-3 pt-4">
                    <button type="button" onclick="hideAssignTypeModal()" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                        Cancel
                    </button>
                    <button type="submit" 
                            class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700">
                        <span id="assignButtonText">Assign Type</span>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
let currentAssignUserId = null;
let currentUserTypeId = null;

function showTypeAssignModal(userId, userName) {
    currentAssignUserId = userId;
    currentUserTypeId = null;
    
    document.getElementById('assignTypeModalTitle').textContent = 'Assign User Type';
    document.getElementById('assignUserName').textContent = `Assign a type to: ${userName}`;
    document.getElementById('assign_user_id').value = userId;
    document.getElementById('user_type_id').value = '';
    document.getElementById('assignButtonText').textContent = 'Assign Type';
    document.getElementById('typeWarning').classList.add('hidden');
    
    document.getElementById('assignTypeModal').classList.remove('hidden');
}

function showTypeChangeModal(userId, userTypeId, userName) {
    currentAssignUserId = userId;
    currentUserTypeId = userTypeId;
    
    document.getElementById('assignTypeModalTitle').textContent = 'Change User Type';
    document.getElementById('assignUserName').textContent = `Change type for: ${userName}`;
    document.getElementById('assign_user_id').value = userId;
    document.getElementById('user_type_id').value = userTypeId;
    document.getElementById('assignButtonText').textContent = 'Change Type';
    document.getElementById('typeWarning').classList.remove('hidden');
    
    document.getElementById('assignTypeModal').classList.remove('hidden');
}

function hideAssignTypeModal() {
    document.getElementById('assignTypeModal').classList.add('hidden');
    currentAssignUserId = null;
    currentUserTypeId = null;
}

// Handle form submission
document.getElementById('assignTypeForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const userId = formData.get('user_id');
    const userTypeId = formData.get('user_type_id');
    
    fetch(`/admin/userplus/users/${userId}/assign-type`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-Requested-With': 'XMLHttpRequest'
        },
        body: `user_type_id=${userTypeId}`
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification(data.message, 'success');
            hideAssignTypeModal();
            location.reload(); // Reload to show updated user type
        } else {
            showNotification(data.message || 'Failed to assign user type', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showNotification('An error occurred while assigning user type', 'error');
    });
});

function showNotification(message, type) {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 z-50 p-4 rounded-md shadow-lg ${
        type === 'success' ? 'bg-green-100 text-green-800 border border-green-200' : 
        'bg-red-100 text-red-800 border border-red-200'
    }`;
    notification.innerHTML = `
        <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                ${type === 'success' ? 
                    '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>' :
                    '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>'
                }
            </svg>
            <span>${message}</span>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // Remove notification after 3 seconds
    setTimeout(() => {
        notification.remove();
    }, 3000);
}
</script>