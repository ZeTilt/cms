{% extends 'admin/base.html.twig' %}

{% block page_title %}{{ isNew ? 'Nouvel Événement' : 'Modifier l\'Événement' }}{% endblock %}

{% block breadcrumb_items %}
<li class="flex items-center">
    <svg class="flex-shrink-0 h-4 w-4 text-gray-300 mx-1" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
    </svg>
    <a href="{{ path('admin_events_list') }}" class="text-gray-500 hover:text-gray-700">Événements</a>
</li>
<li class="flex items-center">
    <svg class="flex-shrink-0 h-4 w-4 text-gray-300 mx-1" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
    </svg>
    <span class="text-gray-500">{{ isNew ? 'Nouveau' : 'Modifier' }}</span>
</li>
{% endblock %}

{% block content %}
<div class="max-w-4xl">
    <form method="POST" class="space-y-6">
        <div class="bg-white shadow-sm rounded-lg">
            <div class="px-6 py-4 border-b border-gray-200">
                <h2 class="text-lg font-medium text-gray-900">Informations de l'événement</h2>
            </div>
            
            <div class="px-6 py-4 space-y-6">
                <!-- Titre -->
                <div>
                    <label for="title" class="block text-sm font-medium text-gray-700 mb-2">
                        Titre de l'événement *
                    </label>
                    <input type="text" id="title" name="title" 
                           value="{{ event.title ?? '' }}" 
                           required
                           class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-club-orange focus:border-club-orange sm:text-sm">
                </div>

                <!-- Description -->
                <div>
                    <label for="description" class="block text-sm font-medium text-gray-700 mb-2">
                        Description
                    </label>
                    <textarea id="description" name="description" rows="4"
                              class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-club-orange focus:border-club-orange sm:text-sm">{{ event.description ?? '' }}</textarea>
                </div>

                <!-- Dates et heures -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label for="start_date" class="block text-sm font-medium text-gray-700 mb-2">
                            Date et heure de début *
                        </label>
                        <input type="datetime-local" id="start_date" name="start_date" 
                               value="{{ event.startDate ? event.startDate|date('Y-m-d\\TH:i') : '' }}" 
                               required
                               class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-club-orange focus:border-club-orange sm:text-sm">
                    </div>
                    <div>
                        <label for="end_date" class="block text-sm font-medium text-gray-700 mb-2">
                            Date et heure de fin
                        </label>
                        <input type="datetime-local" id="end_date" name="end_date" 
                               value="{{ event.endDate ? event.endDate|date('Y-m-d\\TH:i') : '' }}"
                               class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-club-orange focus:border-club-orange sm:text-sm">
                    </div>
                </div>

                <!-- Lieu -->
                <div>
                    <label for="location" class="block text-sm font-medium text-gray-700 mb-2">
                        Lieu
                    </label>
                    <input type="text" id="location" name="location" 
                           value="{{ event.location ?? '' }}"
                           placeholder="Ex: Piscine Océanis, Port de Vannes..."
                           class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-club-orange focus:border-club-orange sm:text-sm">
                </div>

                <!-- Type d'événement -->
                <div>
                    <label for="event_type" class="block text-sm font-medium text-gray-700 mb-2">
                        Type d'événement *
                    </label>
                    {% if eventTypes|length > 0 %}
                        <select id="event_type" name="event_type_id" required
                                class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-club-orange focus:border-club-orange sm:text-sm">
                            <option value="">-- Sélectionner un type d'événement --</option>
                            {% for eventType in eventTypes %}
                                <option value="{{ eventType.id }}" 
                                        data-color="{{ eventType.color }}"
                                        {{ event.eventType and event.eventType.id == eventType.id ? 'selected' : '' }}>
                                    {{ eventType.name }}
                                </option>
                            {% endfor %}
                        </select>
                        <p class="mt-1 text-sm text-gray-500">
                            Aucun type ne vous convient ? <a href="{{ path('admin_event_types_new') }}" target="_blank" class="text-club-orange hover:text-club-orange-dark">Créez un nouveau type</a>
                        </p>
                    {% else %}
                        <div class="rounded-md bg-yellow-50 p-4">
                            <div class="flex">
                                <div class="flex-shrink-0">
                                    <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
                                    </svg>
                                </div>
                                <div class="ml-3">
                                    <h3 class="text-sm font-medium text-yellow-800">Aucun type d'événement configuré</h3>
                                    <div class="mt-2 text-sm text-yellow-700">
                                        <p>Vous devez d'abord créer des types d'événements avant de pouvoir créer un événement.</p>
                                    </div>
                                    <div class="mt-4">
                                        <a href="{{ path('admin_event_types_new') }}" 
                                           class="text-sm bg-yellow-50 text-yellow-800 rounded-md p-2 hover:bg-yellow-100">
                                            Créer un type d'événement →
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    {% endif %}
                </div>

                <!-- Récurrence -->
                <div class="sm:col-span-2">
                    <div class="flex items-center mb-4">
                        <input type="checkbox" 
                               name="is_recurring" 
                               id="is_recurring" 
                               value="1"
                               {{ event.isRecurring ? 'checked' : '' }}
                               onchange="toggleRecurrenceFields(this.checked)"
                               class="h-4 w-4 text-club-orange focus:ring-club-orange border-gray-300 rounded">
                        <label for="is_recurring" class="ml-2 block text-sm font-medium text-gray-900">
                            Événement récurrent
                        </label>
                    </div>
                    
                    <div id="recurrence_fields" style="display: {{ event.isRecurring ? 'block' : 'none' }}">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg">
                            <!-- Type de récurrence -->
                            <div>
                                <label for="recurrence_type" class="block text-sm font-medium text-gray-700 mb-2">
                                    Fréquence
                                </label>
                                <select name="recurrence_type" id="recurrence_type"
                                        onchange="toggleWeekdayFields(this.value)"
                                        class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-club-orange focus:border-club-orange sm:text-sm">
                                    <option value="weekly" {{ event.recurrenceType == 'weekly' ? 'selected' : '' }}>Hebdomadaire</option>
                                    <option value="monthly" {{ event.recurrenceType == 'monthly' ? 'selected' : '' }}>Mensuel</option>
                                    <option value="daily" {{ event.recurrenceType == 'daily' ? 'selected' : '' }}>Quotidien</option>
                                </select>
                            </div>
                            
                            <!-- Intervalle -->
                            <div>
                                <label for="recurrence_interval" class="block text-sm font-medium text-gray-700 mb-2">
                                    Répéter tous les
                                </label>
                                <div class="flex items-center space-x-2">
                                    <input type="number" 
                                           name="recurrence_interval" 
                                           id="recurrence_interval" 
                                           value="{{ event.recurrenceInterval ?? 1 }}"
                                           min="1" max="12"
                                           class="block w-20 border-gray-300 rounded-md shadow-sm focus:ring-club-orange focus:border-club-orange sm:text-sm">
                                    <span class="text-sm text-gray-500" id="interval_label">semaine(s)</span>
                                </div>
                            </div>
                            
                            <!-- Jours de la semaine (pour hebdomadaire) -->
                            <div class="md:col-span-2" id="weekdays_field" style="display: {{ event.recurrenceType == 'weekly' ? 'block' : 'none' }}">
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    Jours de la semaine
                                </label>
                                <div class="flex flex-wrap gap-2">
                                    {% set weekdays = [
                                        {value: 1, label: 'Lun'},
                                        {value: 2, label: 'Mar'},
                                        {value: 3, label: 'Mer'},
                                        {value: 4, label: 'Jeu'},
                                        {value: 5, label: 'Ven'},
                                        {value: 6, label: 'Sam'},
                                        {value: 7, label: 'Dim'}
                                    ] %}
                                    {% for weekday in weekdays %}
                                        <label class="inline-flex items-center">
                                            <input type="checkbox" 
                                                   name="recurrence_weekdays[]" 
                                                   value="{{ weekday.value }}"
                                                   {{ event.recurrenceWeekdays and weekday.value in event.recurrenceWeekdays ? 'checked' : '' }}
                                                   class="h-4 w-4 text-club-orange focus:ring-club-orange border-gray-300 rounded">
                                            <span class="ml-1 text-sm text-gray-700">{{ weekday.label }}</span>
                                        </label>
                                    {% endfor %}
                                </div>
                                <p class="mt-1 text-xs text-gray-500">Si aucun jour n'est sélectionné, l'événement se répétera le même jour de la semaine</p>
                            </div>
                            
                            <!-- Date de fin de récurrence -->
                            <div class="md:col-span-2">
                                <label for="recurrence_end_date" class="block text-sm font-medium text-gray-700 mb-2">
                                    Répéter jusqu'au
                                </label>
                                <input type="date" 
                                       name="recurrence_end_date" 
                                       id="recurrence_end_date" 
                                       value="{{ event.recurrenceEndDate ? event.recurrenceEndDate|date('Y-m-d') : '' }}"
                                       class="block w-full border-gray-300 rounded-md shadow-sm focus:ring-club-orange focus:border-club-orange sm:text-sm">
                                <p class="mt-1 text-xs text-gray-500">Laisser vide pour répéter sur 1 an maximum</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Participants -->
                <div>
                    <label for="max_participants" class="block text-sm font-medium text-gray-700 mb-2">
                        Nombre maximum de participants
                    </label>
                    <input type="number" id="max_participants" name="max_participants" 
                           value="{{ event.maxParticipants ?? '' }}" 
                           min="1" max="100"
                           placeholder="Laisser vide pour aucune limite"
                           class="block w-32 border-gray-300 rounded-md shadow-sm focus:ring-club-orange focus:border-club-orange sm:text-sm">
                    <p class="mt-1 text-sm text-gray-500">
                        Si défini, les utilisateurs pourront voir le nombre de places disponibles
                    </p>
                </div>
            </div>
        </div>

        <!-- Conditions d'inscription -->
        <div class="bg-white shadow-sm rounded-lg">
            <div class="px-6 py-4 border-b border-gray-200">
                <div class="flex items-center justify-between">
                    <div>
                        <h2 class="text-lg font-medium text-gray-900">Conditions d'inscription</h2>
                        <p class="mt-1 text-sm text-gray-500">Définissez les prérequis pour participer à cet événement</p>
                    </div>
                    {% if not isNew %}
                    <button type="button" onclick="showAddConditionForm()" 
                            class="inline-flex items-center px-3 py-2 bg-club-orange text-white text-sm font-medium rounded-md hover:bg-club-orange-dark">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        Ajouter une condition
                    </button>
                    {% endif %}
                </div>
            </div>
            
            <div class="px-6 py-4">
                {% if isNew %}
                    <!-- Nouvel événement - besoin d'enregistrer d'abord -->
                    <div class="text-center py-8 text-gray-500">
                        <svg class="mx-auto h-12 w-12 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <p class="mt-2 text-sm">Enregistrez d'abord l'événement pour pouvoir définir des conditions d'inscription.</p>
                    </div>
                {% else %}
                    <!-- Événement existant - toujours afficher le formulaire -->
                    {% set activeConditions = event.activeConditions %}
                    
                    <!-- Affichage des conditions existantes -->
                    {% if activeConditions|length > 0 %}
                    <div class="space-y-3 mb-4">
                        <h4 class="text-sm font-medium text-gray-900">Conditions actives ({{ activeConditions|length }}) :</h4>
                        <div id="conditions-list" class="space-y-2">
                            {% for condition in activeConditions %}
                                <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg" data-condition-id="{{ condition.id }}">
                                    <div class="flex-1">
                                        <span class="text-sm font-medium text-gray-900">{{ condition.displayName }}</span>
                                        {% if condition.errorMessage %}
                                            <p class="text-xs text-gray-500 mt-1">{{ condition.errorMessage }}</p>
                                        {% endif %}
                                    </div>
                                    <div class="flex items-center space-x-2">
                                        <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
                                            Active
                                        </span>
                                        <button type="button" onclick="editCondition({{ condition.id }})" 
                                                class="text-club-orange hover:text-club-orange-dark text-xs">
                                            Modifier
                                        </button>
                                        <button type="button" onclick="deleteCondition({{ condition.id }})" 
                                                class="text-red-600 hover:text-red-800 text-xs">
                                            Supprimer
                                        </button>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                    {% else %}
                    <div class="text-center py-4 mb-4">
                        <p class="text-sm text-gray-500">Aucune condition définie - cet événement est accessible à tous.</p>
                    </div>
                    {% endif %}
                    
                    <!-- Formulaire d'ajout (TOUJOURS présent pour les événements existants) -->
                    <div class="{% if activeConditions|length > 0 %}border-t pt-4{% endif %}">
                        <button type="button" id="add-condition-btn" onclick="showAddConditionForm()" 
                                class="inline-flex items-center px-3 py-2 bg-club-orange text-white text-sm font-medium rounded-md hover:bg-club-orange-dark">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                            </svg>
                            Ajouter une condition
                        </button>
                        
                        <div id="add-condition-form" class="hidden mt-4 p-4 bg-gray-50 rounded-lg">
                            <form id="quick-condition-form" class="space-y-4">
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <label class="block text-xs font-medium text-gray-700 mb-1">Type d'entité</label>
                                        <select id="quick-entity-class" class="block w-full text-sm border-gray-300 rounded-md">
                                            <option value="">Sélectionner...</option>
                                            <option value="App\\Entity\\User">Utilisateur</option>
                                            <option value="App\\Entity\\Event">Événement</option>
                                        </select>
                                    </div>
                                    <div>
                                        <label class="block text-xs font-medium text-gray-700 mb-1">Attribut</label>
                                        <select id="quick-attribute" class="block w-full text-sm border-gray-300 rounded-md" disabled>
                                            <option value="">Choisir d'abord une entité...</option>
                                        </select>
                                    </div>
                                    <div>
                                        <label class="block text-xs font-medium text-gray-700 mb-1">Opérateur</label>
                                        <select id="quick-operator" class="block w-full text-sm border-gray-300 rounded-md" disabled>
                                            <option value="">Choisir d'abord un attribut...</option>
                                        </select>
                                    </div>
                                    <div>
                                        <label class="block text-xs font-medium text-gray-700 mb-1">Valeur</label>
                                        <div id="quick-value-container">
                                            <select id="quick-value-select" class="block w-full text-sm border-gray-300 rounded-md" disabled>
                                                <option value="">Choisir d'abord un attribut...</option>
                                            </select>
                                            <input type="text" id="quick-value-input" class="hidden block w-full text-sm border-gray-300 rounded-md" disabled 
                                                   placeholder="Entrer une valeur...">
                                        </div>
                                    </div>
                                </div>
                                <div>
                                    <label class="block text-xs font-medium text-gray-700 mb-1">Message d'erreur (optionnel)</label>
                                    <input type="text" id="quick-error-message" class="block w-full text-sm border-gray-300 rounded-md" 
                                           placeholder="Message personnalisé si la condition n'est pas respectée">
                                </div>
                                <div class="flex justify-end space-x-2">
                                    <button type="button" onclick="hideAddConditionForm()" 
                                            class="px-3 py-2 text-sm border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                        Annuler
                                    </button>
                                    <button type="submit" 
                                            class="px-3 py-2 text-sm bg-club-orange text-white rounded-md hover:bg-club-orange-dark">
                                        Ajouter
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                {% endif %}
            </div>
        </div>

                <!-- Statut (pour modification seulement) -->
                {% if not isNew %}
                <div>
                    <label for="status" class="block text-sm font-medium text-gray-700 mb-2">
                        Statut
                    </label>
                    <select id="status" name="status" 
                            class="block w-48 border-gray-300 rounded-md shadow-sm focus:ring-club-orange focus:border-club-orange sm:text-sm">
                        <option value="active" {{ event.status == 'active' ? 'selected' : '' }}>Actif</option>
                        <option value="cancelled" {{ event.status == 'cancelled' ? 'selected' : '' }}>Annulé</option>
                        <option value="completed" {{ event.status == 'completed' ? 'selected' : '' }}>Terminé</option>
                        <option value="draft" {{ event.status == 'draft' ? 'selected' : '' }}>Brouillon</option>
                    </select>
                </div>
                {% endif %}
            </div>
        </div>

        <!-- Actions -->
        <div class="flex items-center justify-between">
            <a href="{{ path('admin_events_list') }}" 
               class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                Annuler
            </a>
            
            <div class="flex items-center space-x-3">
                {% if not isNew %}
                    <a href="{{ path('calendar_event_detail', {id: event.id}) }}" 
                       target="_blank"
                       class="inline-flex items-center px-4 py-2 border border-club-blue text-sm font-medium rounded-md text-club-blue bg-white hover:bg-club-blue hover:text-white">
                        <svg class="-ml-1 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-2M14 4h6m0 0v6m0-6L10 14"/>
                        </svg>
                        Prévisualiser
                    </a>
                {% endif %}
                
                <button type="submit" 
                        class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-club-orange hover:bg-club-orange-dark">
                    <svg class="-ml-1 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                    </svg>
                    {{ isNew ? 'Créer l\'événement' : 'Enregistrer les modifications' }}
                </button>
            </div>
        </div>
    </form>
</div>

<script>
function toggleRecurrenceFields(isRecurring) {
    const fields = document.getElementById('recurrence_fields');
    fields.style.display = isRecurring ? 'block' : 'none';
}

function toggleWeekdayFields(recurrenceType) {
    const weekdaysField = document.getElementById('weekdays_field');
    const intervalLabel = document.getElementById('interval_label');
    
    if (recurrenceType === 'weekly') {
        weekdaysField.style.display = 'block';
        intervalLabel.textContent = 'semaine(s)';
    } else if (recurrenceType === 'monthly') {
        weekdaysField.style.display = 'none';
        intervalLabel.textContent = 'mois';
    } else if (recurrenceType === 'daily') {
        weekdaysField.style.display = 'none';
        intervalLabel.textContent = 'jour(s)';
    }
}


// === Gestion des conditions intégrées ===

// Fonction de debug pour tester les routes
window.debugConditions = function() {
    const eventId = {{ event.id }};
    console.log('Testing routes for eventId:', eventId);
    
    // Test des attributs
    fetch(`/admin/events/${eventId}/conditions/attributes/App\\Entity\\User`)
        .then(response => {
            console.log('Attributes response status:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('Attributes data:', data);
        })
        .catch(error => {
            console.error('Attributes error:', error);
        });
    
    // Test des valeurs
    fetch(`/admin/events/${eventId}/conditions/values/App\\Entity\\User/diving_level`)
        .then(response => {
            console.log('Values response status:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('Values data:', data);
        })
        .catch(error => {
            console.error('Values error:', error);
        });
};

function showAddConditionForm() {
    console.log('showAddConditionForm called');
    const btn = document.getElementById('add-condition-btn');
    const form = document.getElementById('add-condition-form');
    console.log('Button found:', !!btn);
    console.log('Form found:', !!form);
    
    if (btn) btn.style.display = 'none';
    if (form) form.classList.remove('hidden');
}

function hideAddConditionForm() {
    document.getElementById('add-condition-btn').style.display = 'block';
    document.getElementById('add-condition-form').classList.add('hidden');
    // Reset form
    document.getElementById('quick-condition-form').reset();
    resetQuickForm();
}

function resetQuickForm() {
    document.getElementById('quick-attribute').innerHTML = '<option value="">Choisir d\'abord une entité...</option>';
    document.getElementById('quick-attribute').disabled = true;
    document.getElementById('quick-operator').innerHTML = '<option value="">Choisir d\'abord un attribut...</option>';
    document.getElementById('quick-operator').disabled = true;
    document.getElementById('quick-value-select').innerHTML = '<option value="">Choisir d\'abord un attribut...</option>';
    document.getElementById('quick-value-select').disabled = true;
    document.getElementById('quick-value-input').disabled = true;
    document.getElementById('quick-value-select').classList.remove('hidden');
    document.getElementById('quick-value-input').classList.add('hidden');
}

function loadQuickAttributes(entityClass) {
    console.log('loadQuickAttributes called with:', entityClass);
    if (!entityClass) {
        resetQuickForm();
        return;
    }
    
    const eventId = {{ event.id }};
    const url = `/admin/events/${eventId}/conditions/attributes/${encodeURIComponent(entityClass)}`;
    console.log('Fetching attributes from:', url);
    
    fetch(url)
        .then(response => {
            console.log('Attributes response status:', response.status);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('Attributes data received:', data);
            const attributeSelect = document.getElementById('quick-attribute');
            attributeSelect.innerHTML = '<option value="">Sélectionner un attribut...</option>';
            
            for (const [key, label] of Object.entries(data.attributes)) {
                const option = document.createElement('option');
                option.value = key;
                option.textContent = label;
                attributeSelect.appendChild(option);
            }
            
            attributeSelect.disabled = false;
            console.log('Attributes loaded successfully');
        })
        .catch(error => {
            console.error('Erreur lors du chargement des attributs:', error);
        });
}

function showValueInput() {
    document.getElementById('quick-value-select').classList.add('hidden');
    document.getElementById('quick-value-input').classList.remove('hidden');
    document.getElementById('quick-value-input').disabled = false;
    document.getElementById('quick-value-input').focus();
}

function hideValueInput() {
    document.getElementById('quick-value-input').classList.add('hidden');
    document.getElementById('quick-value-select').classList.remove('hidden');
    document.getElementById('quick-value-input').value = '';
}

function loadQuickValues(entityClass, attributeName) {
    console.log('loadQuickValues called with:', entityClass, attributeName);
    if (!entityClass || !attributeName) {
        document.getElementById('quick-operator').innerHTML = '<option value="">Choisir d\'abord un attribut...</option>';
        document.getElementById('quick-operator').disabled = true;
        return;
    }
    
    const eventId = {{ event.id }};
    const url = `/admin/events/${eventId}/conditions/values/${encodeURIComponent(entityClass)}/${encodeURIComponent(attributeName)}`;
    console.log('Fetching values from:', url);
    
    fetch(url)
        .then(response => {
            console.log('Values response status:', response.status);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('Values data received:', data);
            // Charger les opérateurs suggérés
            const operatorSelect = document.getElementById('quick-operator');
            operatorSelect.innerHTML = '<option value="">Sélectionner un opérateur...</option>';
            
            for (const [key, label] of Object.entries(data.suggested_operators)) {
                const option = document.createElement('option');
                option.value = key;
                option.textContent = label;
                operatorSelect.appendChild(option);
            }
            operatorSelect.disabled = false;
            
            // Gérer les valeurs - toujours privilégier le dropdown
            const valueInput = document.getElementById('quick-value-input');
            const valueSelect = document.getElementById('quick-value-select');
            
            // Reset de base
            valueSelect.innerHTML = '<option value="">Sélectionner une valeur...</option>';
            
            if (Object.keys(data.values).length > 0) {
                // Utiliser un select avec les valeurs prédéfinies
                for (const [key, label] of Object.entries(data.values)) {
                    const option = document.createElement('option');
                    option.value = key;
                    option.textContent = label;
                    valueSelect.appendChild(option);
                }
                // Ajouter option "Autre valeur" pour permettre la saisie libre
                const otherOption = document.createElement('option');
                otherOption.value = '__OTHER__';
                otherOption.textContent = '--- Autre valeur ---';
                valueSelect.appendChild(otherOption);
                
                valueSelect.classList.remove('hidden');
                valueInput.classList.add('hidden');
                valueSelect.disabled = false;
            } else {
                // Aucune valeur prédéfinie - permettre uniquement la saisie libre
                const freeTextOption = document.createElement('option');
                freeTextOption.value = '__FREE_TEXT__';
                freeTextOption.textContent = '--- Saisie libre ---';
                valueSelect.appendChild(freeTextOption);
                
                valueSelect.classList.remove('hidden');
                valueInput.classList.add('hidden');
                valueSelect.disabled = false;
                
                // Auto-sélectionner l'option saisie libre
                valueSelect.value = '__FREE_TEXT__';
                // Montrer immédiatement l'input
                showValueInput();
            }
        })
        .catch(error => {
            console.error('Erreur lors du chargement des valeurs:', error);
        });
}

function deleteCondition(conditionId) {
    if (!confirm('Êtes-vous sûr de vouloir supprimer cette condition ?')) {
        return;
    }
    
    const eventId = {{ event.id }};
    fetch(`/admin/events/${eventId}/conditions/${conditionId}/delete`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `_token=${encodeURIComponent('{{ csrf_token('delete_condition_' ~ 'CONDITION_ID') }}'.replace('CONDITION_ID', conditionId))}`
    })
    .then(response => {
        if (response.ok) {
            // Supprimer l'élément de l'interface
            const element = document.querySelector(`[data-condition-id="${conditionId}"]`);
            if (element) {
                element.remove();
            }
            // Recharger la page pour mettre à jour l'état
            window.location.reload();
        } else {
            alert('Erreur lors de la suppression de la condition');
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        alert('Erreur lors de la suppression de la condition');
    });
}

function editCondition(conditionId) {
    // Pour l'instant, rediriger vers l'interface complète
    const eventId = {{ event.id }};
    window.location.href = `/admin/events/${eventId}/conditions/${conditionId}/edit`;
}

// Gestionnaires d'événements pour le formulaire rapide
document.addEventListener('DOMContentLoaded', function() {
    // Chargement des attributs quand l'entité change
    const entitySelect = document.getElementById('quick-entity-class');
    if (entitySelect) {
        entitySelect.addEventListener('change', function() {
            loadQuickAttributes(this.value);
        });
    }
    
    // Chargement des valeurs quand l'attribut change
    const attributeSelect = document.getElementById('quick-attribute');
    if (attributeSelect) {
        attributeSelect.addEventListener('change', function() {
            const entityClass = document.getElementById('quick-entity-class').value;
            loadQuickValues(entityClass, this.value);
        });
    }
    
    // Gestion du changement de sélection dans les valeurs
    const valueSelect = document.getElementById('quick-value-select');
    if (valueSelect) {
        valueSelect.addEventListener('change', function() {
            if (this.value === '__OTHER__' || this.value === '__FREE_TEXT__') {
                showValueInput();
            } else {
                hideValueInput();
            }
        });
    }
    
    // Soumission du formulaire rapide
    const quickForm = document.getElementById('quick-condition-form');
    if (quickForm) {
        quickForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const entityClass = document.getElementById('quick-entity-class').value;
            const attribute = document.getElementById('quick-attribute').value;
            const operator = document.getElementById('quick-operator').value;
            const valueInput = document.getElementById('quick-value-input');
            const valueSelect = document.getElementById('quick-value-select');
            
            // Déterminer la valeur selon l'état du formulaire
            let value = '';
            if (!valueSelect.classList.contains('hidden')) {
                const selectedValue = valueSelect.value;
                if (selectedValue === '__OTHER__' || selectedValue === '__FREE_TEXT__') {
                    value = valueInput.value;
                } else {
                    value = selectedValue;
                }
            } else {
                value = valueInput.value;
            }
            
            const errorMessage = document.getElementById('quick-error-message').value;
            
            if (!entityClass || !attribute || !operator) {
                alert('Veuillez remplir tous les champs requis');
                return;
            }
            
            const eventId = {{ event.id }};
            fetch(`/admin/events/${eventId}/conditions/new`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `entity_class=${encodeURIComponent(entityClass)}&attribute_name=${encodeURIComponent(attribute)}&operator=${encodeURIComponent(operator)}&value=${encodeURIComponent(value)}&error_message=${encodeURIComponent(errorMessage)}`
            })
            .then(response => {
                if (response.ok) {
                    // Recharger la page pour voir la nouvelle condition
                    window.location.reload();
                } else {
                    alert('Erreur lors de l\'ajout de la condition');
                }
            })
            .catch(error => {
                console.error('Erreur:', error);
                alert('Erreur lors de l\'ajout de la condition');
            });
        });
    }
});

// Initialiser l'état au chargement
document.addEventListener('DOMContentLoaded', function() {
    const recurrenceType = document.getElementById('recurrence_type');
    if (recurrenceType) {
        toggleWeekdayFields(recurrenceType.value);
    }
});
</script>
{% endblock %}