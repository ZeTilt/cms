{% extends 'admin/base.html.twig' %}

{% block title %}
    {% if isEdit %}
        {{ 'edit.title'|trans({}, 'events') }}: {{ event.title }} - ZeTilt CMS
    {% else %}
        {{ 'create.title'|trans({}, 'events') }} - ZeTilt CMS
    {% endif %}
{% endblock %}

{% block content %}
<div class="max-w-4xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
    <div class="mb-6">
        <nav class="flex" aria-label="Breadcrumb">
            <ol role="list" class="flex items-center space-x-4">
                <li>
                    <a href="{{ path('admin_events_list') }}" class="text-gray-400 hover:text-gray-500">{{ 'breadcrumb.events'|trans({}, 'events') }}</a>
                </li>
                <li>
                    <div class="flex items-center">
                        <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        <span class="ml-4 text-sm font-medium text-gray-500">
                            {% if isEdit %}{{ 'edit.title'|trans({}, 'events') }}{% else %}{{ 'create.title'|trans({}, 'events') }}{% endif %}
                        </span>
                    </div>
                </li>
            </ol>
        </nav>
        <h1 class="mt-2 text-3xl font-bold text-gray-900">
            {% if isEdit %}
                {{ 'edit.title'|trans({}, 'events') }}: {{ event.title }}
            {% else %}
                {{ 'create.title'|trans({}, 'events') }}
            {% endif %}
        </h1>
    </div>

    <form method="post" action="{{ path('admin_events_save') }}" class="space-y-8">
        {% if isEdit %}
            <input type="hidden" name="id" value="{{ event.id }}">
        {% endif %}

        <!-- Basic Information -->
        <div class="bg-white shadow rounded-lg">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-medium text-gray-900">{{ 'fields.basic_information'|trans({}, 'events') }}</h3>
            </div>
            <div class="px-6 py-4 space-y-6">
                <div>
                    <label for="title" class="block text-sm font-medium text-gray-700">{{ 'fields.title'|trans({}, 'events') }}</label>
                    <input type="text" 
                           name="title" 
                           id="title" 
                           value="{{ event.title ?? '' }}"
                           required
                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                </div>

                <div>
                    <label for="slug" class="block text-sm font-medium text-gray-700">{{ 'fields.slug'|trans({}, 'events') }}</label>
                    <input type="text" 
                           name="slug" 
                           id="slug" 
                           value="{{ event.slug ?? '' }}"
                           required
                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    <p class="mt-2 text-sm text-gray-500">{{ 'fields.slug_help'|trans({}, 'events') }}</p>
                </div>

                <div>
                    <label for="short_description" class="block text-sm font-medium text-gray-700">{{ 'fields.short_description'|trans({}, 'events') }}</label>
                    <textarea name="short_description" 
                              id="short_description" 
                              rows="3"
                              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">{{ event.shortDescription ?? '' }}</textarea>
                    <p class="mt-2 text-sm text-gray-500">{{ 'fields.short_description_help'|trans({}, 'events') }}</p>
                </div>

                <div>
                    <label for="description" class="block text-sm font-medium text-gray-700">{{ 'fields.description'|trans({}, 'admin') }}</label>
                    <textarea name="description" 
                              id="description" 
                              rows="8"
                              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">{{ event.description ?? '' }}</textarea>
                </div>
            </div>
        </div>

        <!-- Diving Schedule -->
        <div class="bg-white shadow rounded-lg">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-medium text-gray-900">{{ 'diving.schedule'|trans({}, 'events') }}</h3>
            </div>
            <div class="px-6 py-4 space-y-6">
                <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
                    <div>
                        <label for="start_date" class="block text-sm font-medium text-gray-700">{{ 'fields.event_date'|trans({}, 'events') }}</label>
                        <input type="date" 
                               name="start_date" 
                               id="start_date" 
                               value="{{ event.startDate ? event.startDate.format('Y-m-d') : '' }}"
                               required
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>

                    <div>
                        <label for="end_date" class="block text-sm font-medium text-gray-700">{{ 'fields.end_date_optional'|trans({}, 'events') }}</label>
                        <input type="date" 
                               name="end_date" 
                               id="end_date" 
                               value="{{ event.endDate ? event.endDate.format('Y-m-d') : '' }}"
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>
                </div>

                <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
                    <div>
                        <label for="club_departure_time" class="block text-sm font-medium text-gray-700">{{ 'diving.club_departure'|trans({}, 'events') }}</label>
                        <input type="time" 
                               name="club_departure_time" 
                               id="club_departure_time" 
                               value="{{ event.clubDepartureTime ? event.clubDepartureTime.format('H:i') : '' }}"
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        <p class="mt-2 text-sm text-gray-500">{{ 'diving.club_departure_help'|trans({}, 'events') }}</p>
                    </div>

                    <div>
                        <label for="dock_departure_time" class="block text-sm font-medium text-gray-700">{{ 'diving.dock_departure'|trans({}, 'events') }}</label>
                        <input type="time" 
                               name="dock_departure_time" 
                               id="dock_departure_time" 
                               value="{{ event.dockDepartureTime ? event.dockDepartureTime.format('H:i') : '' }}"
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        <p class="mt-2 text-sm text-gray-500">{{ 'diving.dock_departure_help'|trans({}, 'events') }}</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Diving Team -->
        <div class="bg-white shadow rounded-lg">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-medium text-gray-900">{{ 'diving.team'|trans({}, 'events') }}</h3>
            </div>
            <div class="px-6 py-4 space-y-6">
                <div>
                    <label for="pilot" class="block text-sm font-medium text-gray-700">{{ 'diving.pilot'|trans({}, 'events') }}</label>
                    <select name="pilot" 
                            id="pilot" 
                            class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        <option value="">{{ 'diving.no_pilot'|trans({}, 'events') }}</option>
                        {% for pilot in pilots %}
                            <option value="{{ pilot.id }}" {{ event.pilot and event.pilot.id == pilot.id ? 'selected' : '' }}>
                                {{ pilot.fullName }}
                            </option>
                        {% endfor %}
                    </select>
                    <p class="mt-2 text-sm text-gray-500">{{ 'diving.pilot_help'|trans({}, 'events') }}</p>
                </div>

                <div>
                    <label for="diving_comments" class="block text-sm font-medium text-gray-700">{{ 'diving.comments'|trans({}, 'events') }}</label>
                    <textarea name="diving_comments" 
                              id="diving_comments" 
                              rows="4"
                              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">{{ event.divingComments ?? '' }}</textarea>
                    <p class="mt-2 text-sm text-gray-500">{{ 'diving.comments_help'|trans({}, 'events') }}</p>
                </div>
            </div>
        </div>

        <!-- Location -->
        <div class="bg-white shadow rounded-lg">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-medium text-gray-900">Location</h3>
            </div>
            <div class="px-6 py-4 space-y-6">
                <div>
                    <label for="location" class="block text-sm font-medium text-gray-700">Venue Name</label>
                    <input type="text" 
                           name="location" 
                           id="location" 
                           value="{{ event.location ?? '' }}"
                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                </div>

                <div>
                    <label for="address" class="block text-sm font-medium text-gray-700">Address</label>
                    <textarea name="address" 
                              id="address" 
                              rows="3"
                              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">{{ event.address ?? '' }}</textarea>
                </div>
            </div>
        </div>

        <!-- Registration Conditions -->
        <div class="bg-white shadow rounded-lg">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-medium text-gray-900">Conditions d'inscription</h3>
                <p class="mt-1 text-sm text-gray-600">Définir les conditions que les utilisateurs doivent remplir pour s'inscrire à cet événement</p>
            </div>
            <div class="px-6 py-4 space-y-6">
                <div id="registration-conditions">
                    {% set conditions = event.registrationConditions ?? [] %}
                    {% for condition in conditions %}
                        <div class="registration-condition border border-gray-200 rounded-lg p-4" data-index="{{ loop.index0 }}">
                            <div class="flex justify-between items-start mb-4">
                                <h4 class="text-sm font-medium text-gray-900">Condition {{ loop.index }}</h4>
                                <button type="button" onclick="removeCondition(this)" class="remove-condition text-red-600 hover:text-red-800">
                                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </button>
                            </div>
                            
                            <div class="grid grid-cols-1 gap-4 sm:grid-cols-3">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Entité</label>
                                    <select name="registration_conditions[{{ loop.index0 }}][entity_type]" 
                                            onchange="updateAttributesForEntity({{ loop.index0 }}, this.value)"
                                            class="entity-select mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                        <option value="">{{ 'common.messages.choose_entity'|trans({}, 'admin') }}</option>
                                        {% for entity_key, entity_label in available_entities %}
                                            <option value="{{ entity_key }}" {{ condition.entity_type == entity_key ? 'selected' : '' }}>{{ entity_label }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                                
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Attribut</label>
                                    <select name="registration_conditions[{{ loop.index0 }}][attribute_key]" 
                                            onchange="updateValueFieldForAttribute({{ loop.index0 }}, this.value)"
                                            data-selected-value="{{ condition.attribute_key ?? '' }}"
                                            class="attribute-select mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                        <option value="">{{ 'common.messages.choose_attribute'|trans({}, 'admin') }}</option>
                                    </select>
                                </div>
                                
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Opérateur</label>
                                    <select name="registration_conditions[{{ loop.index0 }}][operator]" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                        <option value="">{{ 'common.messages.choose_operator'|trans({}, 'admin') }}</option>
                                        {% for op_key, op_label in available_operators %}
                                            <option value="{{ op_key }}" {{ condition.operator == op_key ? 'selected' : '' }}>{{ op_label }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                            </div>
                            
                            <div class="mt-4">
                                <label class="block text-sm font-medium text-gray-700">Valeur</label>
                                <div class="value-field-container" data-index="{{ loop.index0 }}" data-current-value="{{ condition.value ?? '' }}">
                                    <input type="text" name="registration_conditions[{{ loop.index0 }}][value]" 
                                           value="{{ condition.value ?? '' }}"
                                           placeholder="Valeur requise"
                                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                </div>
                            </div>
                            
                            <div class="mt-4">
                                <label class="block text-sm font-medium text-gray-700">Message d'erreur</label>
                                <textarea name="registration_conditions[{{ loop.index0 }}][message]" 
                                          rows="2"
                                          placeholder="Message affiché si la condition n'est pas remplie"
                                          class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">{{ condition.message ?? '' }}</textarea>
                            </div>
                        </div>
                    {% endfor %}
                </div>
                
                <div class="flex justify-between">
                    <button type="button" id="add-condition" onclick="addRegistrationCondition()" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <svg class="-ml-1 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        Ajouter une condition
                    </button>
                </div>

                <script>
                // Gestion des conditions d'inscription - inline pour éviter les problèmes de timing
                let conditionIndex = {{ (event.registrationConditions ?? [])|length }};

                // Détails des attributs depuis le serveur
                const attributesDetails = {{ attributes_details|json_encode|raw }};
                const availableEntities = {{ available_entities|json_encode|raw }};
                const availableOperators = {{ available_operators|json_encode|raw }};

                function getConditionTemplate(index) {
                    let entityOptions = '<option value="">{{ 'common.messages.choose_entity'|trans({}, 'admin') }}</option>';
                    Object.keys(availableEntities).forEach(key => {
                        entityOptions += `<option value="${key}">${availableEntities[key]}</option>`;
                    });
                    
                    let operatorOptions = '<option value="">{{ 'common.messages.choose_operator'|trans({}, 'admin') }}</option>';
                    Object.keys(availableOperators).forEach(key => {
                        operatorOptions += `<option value="${key}">${availableOperators[key]}</option>`;
                    });

                    return `
                        <div class="registration-condition border border-gray-200 rounded-lg p-4" data-index="${index}">
                            <div class="flex justify-between items-start mb-4">
                                <h4 class="text-sm font-medium text-gray-900">Condition ${index + 1}</h4>
                                <button type="button" onclick="removeCondition(this)" class="remove-condition text-red-600 hover:text-red-800">
                                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </button>
                            </div>
                            
                            <div class="grid grid-cols-1 gap-4 sm:grid-cols-3">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Entité</label>
                                    <select name="registration_conditions[${index}][entity_type]" 
                                            onchange="updateAttributesForEntity(${index}, this.value)"
                                            class="entity-select mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                        ${entityOptions}
                                    </select>
                                </div>
                                
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Attribut</label>
                                    <select name="registration_conditions[${index}][attribute_key]" 
                                            onchange="updateValueFieldForAttribute(${index}, this.value)"
                                            class="attribute-select mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                        <option value="">{{ 'common.messages.choose_attribute'|trans({}, 'admin') }}</option>
                                    </select>
                                </div>
                                
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Opérateur</label>
                                    <select name="registration_conditions[${index}][operator]" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                        ${operatorOptions}
                                    </select>
                                </div>
                            </div>
                            
                            <div class="mt-4">
                                <label class="block text-sm font-medium text-gray-700">Valeur</label>
                                <div class="value-field-container" data-index="${index}">
                                    <input type="text" name="registration_conditions[${index}][value]" 
                                           placeholder="Valeur requise"
                                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                </div>
                            </div>
                            
                            <div class="mt-4">
                                <label class="block text-sm font-medium text-gray-700">Message d'erreur</label>
                                <textarea name="registration_conditions[${index}][message]" 
                                          rows="2"
                                          placeholder="Message affiché si la condition n'est pas remplie"
                                          class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                            </div>
                        </div>
                    `;
                }

                async function updateAttributesForEntity(index, entityType) {
                    const attributeSelect = document.querySelector(`select[name="registration_conditions[${index}][attribute_key]"]`);
                    const valueContainer = document.querySelector(`.value-field-container[data-index="${index}"]`);
                    const selectedValue = attributeSelect.getAttribute('data-selected-value');
                    
                    // Réinitialiser les sélecteurs
                    attributeSelect.innerHTML = '<option value="">{{ 'common.messages.choose_attribute'|trans({}, 'admin') }}</option>';
                    valueContainer.innerHTML = `
                        <input type="text" name="registration_conditions[${index}][value]" 
                               placeholder="Valeur requise"
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    `;
                    
                    if (!entityType) return;
                    
                    try {
                        const response = await fetch(`/admin/events/ajax/attributes/${entityType}`);
                        const attributes = await response.json();
                        
                        Object.keys(attributes).forEach(key => {
                            const option = document.createElement('option');
                            option.value = key;
                            option.textContent = attributes[key].label;
                            // Pré-sélectionner la valeur existante
                            if (selectedValue && key === selectedValue) {
                                option.selected = true;
                            }
                            attributeSelect.appendChild(option);
                        });
                        
                        // Stocker les détails des attributs pour cette entité
                        window.currentEntityAttributes = window.currentEntityAttributes || {};
                        window.currentEntityAttributes[entityType] = attributes;
                        
                        // Si une valeur était pré-sélectionnée, mettre à jour le champ de valeur
                        if (selectedValue && attributeSelect.value === selectedValue) {
                            updateValueFieldForAttribute(index, selectedValue);
                        }
                        
                    } catch (error) {
                        console.error('Erreur lors du chargement des attributs:', error);
                    }
                }

                function updateValueFieldForAttribute(index, attributeKey) {
                    const conditionDiv = document.querySelector(`.registration-condition[data-index="${index}"]`);
                    const entityType = conditionDiv.querySelector('select[name*="[entity_type]"]').value;
                    const container = document.querySelector(`.value-field-container[data-index="${index}"]`);
                    
                    if (!container || !attributeKey || !entityType) return;

                    // Récupérer la valeur actuelle depuis l'attribut data ou l'input existant
                    const currentValue = container.getAttribute('data-current-value') || 
                                       (container.querySelector('input[name*="[value]"], select[name*="[value]"]')?.value) || '';

                    // Récupérer les détails de l'attribut
                    const attributes = window.currentEntityAttributes?.[entityType];
                    const attributeDetails = attributes?.[attributeKey];
                    
                    if (!attributeDetails || !attributeDetails.details) {
                        // Champ texte par défaut
                        container.innerHTML = `
                            <input type="text" name="registration_conditions[${index}][value]" 
                                   value="${currentValue}"
                                   onchange="updateCurrentValue(${index}, this.value)"
                                   placeholder="Valeur requise"
                                   class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        `;
                        return;
                    }

                    const details = attributeDetails.details;
                    
                    if (details.type === 'select' && details.options && details.options.length > 0) {
                        // Créer un select avec les options disponibles
                        let selectOptions = '<option value="">{{ 'common.messages.choose_value'|trans({}, 'admin') }}</option>';
                        details.options.forEach(option => {
                            const selected = currentValue === option ? 'selected' : '';
                            selectOptions += `<option value="${option}" ${selected}>${option}</option>`;
                        });
                        
                        container.innerHTML = `
                            <select name="registration_conditions[${index}][value]" 
                                    onchange="updateCurrentValue(${index}, this.value)"
                                    class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                ${selectOptions}
                            </select>
                        `;
                    } else if (details.type === 'number' || details.type === 'integer') {
                        // Champ numérique
                        container.innerHTML = `
                            <input type="number" name="registration_conditions[${index}][value]" 
                                   value="${currentValue}"
                                   onchange="updateCurrentValue(${index}, this.value)"
                                   placeholder="{{ 'common.placeholders.numeric_value'|trans({}, 'admin') }}"
                                   class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        `;
                    } else if (details.type === 'date') {
                        // Champ date
                        container.innerHTML = `
                            <input type="date" name="registration_conditions[${index}][value]" 
                                   value="${currentValue}"
                                   onchange="updateCurrentValue(${index}, this.value)"
                                   class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        `;
                    } else if (details.type === 'boolean') {
                        // Select pour booléen
                        const yesSelected = currentValue === '1' ? 'selected' : '';
                        const noSelected = currentValue === '0' ? 'selected' : '';
                        container.innerHTML = `
                            <select name="registration_conditions[${index}][value]" 
                                    onchange="updateCurrentValue(${index}, this.value)"
                                    class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                <option value="">{{ 'common.messages.choose_value'|trans({}, 'admin') }}</option>
                                <option value="1" ${yesSelected}>{{ 'common.messages.yes'|trans({}, 'admin') }}</option>
                                <option value="0" ${noSelected}>{{ 'common.messages.no'|trans({}, 'admin') }}</option>
                            </select>
                        `;
                    } else {
                        // Champ texte par défaut
                        container.innerHTML = `
                            <input type="text" name="registration_conditions[${index}][value]" 
                                   value="${currentValue}"
                                   onchange="updateCurrentValue(${index}, this.value)"
                                   placeholder="Valeur requise"
                                   class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        `;
                    }
                }

                function updateCurrentValue(index, value) {
                    const container = document.querySelector(`.value-field-container[data-index="${index}"]`);
                    if (container) {
                        container.setAttribute('data-current-value', value);
                    }
                }

                function addRegistrationCondition() {
                    const container = document.getElementById('registration-conditions');
                    if (container) {
                        const newCondition = document.createElement('div');
                        newCondition.innerHTML = getConditionTemplate(conditionIndex);
                        container.appendChild(newCondition.firstElementChild);
                        conditionIndex++;
                        updateConditionNumbers();
                    }
                }

                function removeCondition(button) {
                    const condition = button.closest('.registration-condition');
                    condition.remove();
                    updateConditionNumbers();
                }

                function updateConditionNumbers() {
                    const conditions = document.querySelectorAll('.registration-condition');
                    conditions.forEach((condition, index) => {
                        const title = condition.querySelector('h4');
                        title.textContent = `Condition ${index + 1}`;
                        condition.setAttribute('data-index', index);
                        
                        // Mettre à jour les noms des champs
                        const inputs = condition.querySelectorAll('input, select, textarea');
                        inputs.forEach(input => {
                            const name = input.getAttribute('name');
                            if (name && name.includes('registration_conditions[')) {
                                const newName = name.replace(/registration_conditions\[\d+\]/, `registration_conditions[${index}]`);
                                input.setAttribute('name', newName);
                            }
                        });
                        
                        // Mettre à jour les onchange handlers
                        const entitySelect = condition.querySelector('select[name*="[entity_type]"]');
                        const attributeSelect = condition.querySelector('select[name*="[attribute_key]"]');
                        
                        if (entitySelect) {
                            entitySelect.setAttribute('onchange', `updateAttributesForEntity(${index}, this.value)`);
                        }
                        if (attributeSelect) {
                            attributeSelect.setAttribute('onchange', `updateValueFieldForAttribute(${index}, this.value)`);
                        }
                    });
                }

                // Initialiser les conditions existantes
                document.addEventListener('DOMContentLoaded', function() {
                    document.querySelectorAll('.registration-condition').forEach((condition, index) => {
                        const entitySelect = condition.querySelector('select[name*="[entity_type]"]');
                        const attributeSelect = condition.querySelector('select[name*="[attribute_key]"]');
                        
                        if (entitySelect && entitySelect.value) {
                            // Charger les attributs pour cette entité
                            updateAttributesForEntity(index, entitySelect.value);
                        }
                    });
                });
                </script>
            </div>
        </div>

        <!-- Settings -->
        <div class="bg-white shadow rounded-lg">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-medium text-gray-900">Event Settings</h3>
            </div>
            <div class="px-6 py-4 space-y-6">
                <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
                    <div>
                        <label for="status" class="block text-sm font-medium text-gray-700">Status</label>
                        <select name="status" 
                                id="status" 
                                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                            <option value="draft" {{ (event.status ?? 'draft') == 'draft' ? 'selected' : '' }}>Draft</option>
                            <option value="published" {{ (event.status ?? '') == 'published' ? 'selected' : '' }}>Published</option>
                            <option value="cancelled" {{ (event.status ?? '') == 'cancelled' ? 'selected' : '' }}>Cancelled</option>
                        </select>
                    </div>

                    <div>
                        <label for="type" class="block text-sm font-medium text-gray-700">Type</label>
                        <select name="type" 
                                id="type" 
                                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                            {% for eventType in eventTypes %}
                                <option value="{{ eventType.slug }}" 
                                        {{ (event.type ?? (loop.first ? eventType.slug : '')) == eventType.slug ? 'selected' : '' }}>
                                    {{ eventType.name }}
                                </option>
                            {% endfor %}
                        </select>
                    </div>
                </div>

                <div class="flex items-center">
                    <input id="requires_registration" 
                           name="requires_registration" 
                           type="checkbox" 
                           {{ event.requiresRegistration ?? false ? 'checked' : '' }}
                           class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                    <label for="requires_registration" class="ml-2 block text-sm text-gray-900">
                        Requires Registration
                    </label>
                </div>

                <div>
                    <label for="max_participants" class="block text-sm font-medium text-gray-700">Maximum Participants</label>
                    <input type="number" 
                           name="max_participants" 
                           id="max_participants" 
                           value="{{ event.maxParticipants ?? '' }}"
                           min="0"
                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    <p class="mt-2 text-sm text-gray-500">Leave empty for unlimited participants</p>
                </div>

                <div>
                    <label for="tags" class="block text-sm font-medium text-gray-700">Tags</label>
                    <input type="text" 
                           name="tags" 
                           id="tags" 
                           value="{{ event.tags ? event.tags|join(', ') : '' }}"
                           class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    <p class="mt-2 text-sm text-gray-500">Separate multiple tags with commas</p>
                </div>
            </div>
        </div>

        {% if isEdit %}
        <!-- Custom Attributes -->
        <div class="bg-white shadow rounded-lg">
            <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
                <h3 class="text-lg font-medium text-gray-900">Custom Attributes</h3>
                <div class="flex space-x-2">
                    <a href="{{ path('admin_events_attributes', {'id': event.id}) }}" 
                       class="inline-flex items-center px-3 py-1 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200">
                        <svg class="-ml-1 mr-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        </svg>
                        Attributes
                    </a>
                    <a href="{{ path('admin_events_registrations', {'id': event.id}) }}" 
                       class="inline-flex items-center px-3 py-1 border border-transparent text-xs font-medium rounded text-green-700 bg-green-100 hover:bg-green-200">
                        <svg class="-ml-1 mr-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                        </svg>
                        Registrations ({{ event.registrations|length }})
                    </a>
                </div>
            </div>
            <div class="px-6 py-4">
                {% if event.eventAttributes|length > 0 %}
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {% for attribute in event.eventAttributes %}
                            <div class="border border-gray-200 rounded-lg p-3">
                                <div class="flex justify-between items-start">
                                    <div class="flex-1">
                                        <div class="flex items-center space-x-2 mb-1">
                                            <span class="text-sm font-medium text-gray-900">{{ attribute.attributeKey }}</span>
                                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                                                {{ attribute.attributeType }}
                                            </span>
                                        </div>
                                        
                                        <div class="text-sm text-gray-600">
                                            {% set value = attribute.typedValue %}
                                            {% if value is same as(true) %}
                                                <span class="text-green-600">✓ Yes</span>
                                            {% elseif value is same as(false) %}
                                                <span class="text-red-600">✗ No</span>
                                            {% elseif value is null %}
                                                <span class="text-gray-400 italic">Not set</span>
                                            {% elseif attribute.attributeType == 'date' and value %}
                                                {{ value|date('Y-m-d') }}
                                            {% else %}
                                                {{ value|slice(0, 50) }}{% if value|length > 50 %}...{% endif %}
                                            {% endif %}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                {% else %}
                    <div class="text-center py-6">
                        <svg class="mx-auto h-8 w-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                        </svg>
                        <p class="mt-2 text-sm text-gray-500">No custom attributes defined yet.</p>
                        <p class="text-xs text-gray-400">Click "Manage Attributes" to add custom fields for this event.</p>
                    </div>
                {% endif %}
            </div>
        </div>
        {% endif %}

        <!-- Actions -->
        <div class="flex justify-end">
            <a href="{{ path('admin_events_list') }}" 
               class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Cancel
            </a>
            <button type="submit" 
                    class="ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                {% if isEdit %}Update Event{% else %}Create Event{% endif %}
            </button>
        </div>
    </form>
</div>

<script>
// Auto-generate slug from title
document.getElementById('title').addEventListener('input', function() {
    const title = this.value;
    const slug = title.toLowerCase()
        .replace(/[^\w\s-]/g, '')
        .replace(/[\s_-]+/g, '-')
        .replace(/^-+|-+$/g, '');
    document.getElementById('slug').value = slug;
});

// Handle verification checkbox
document.getElementById('requires_verification').addEventListener('change', function() {
    const verificationSettings = document.getElementById('verification_settings');
    verificationSettings.style.display = this.checked ? 'block' : 'none';
});

// Handle attribute selection and populate values
document.getElementById('required_attribute').addEventListener('change', function() {
    const requiredValueSelect = document.getElementById('required_value');
    const selectedAttribute = this.value;
    
    // Clear existing options
    requiredValueSelect.innerHTML = '<option value="">{{ 'common.messages.choose_value'|trans({}, 'admin') }}</option>';
    
    // Define attribute options
    const attributeOptions = {
        'niveau_plongee': [
            { value: 'debutant', text: 'Débutant' },
            { value: 'niveau1', text: 'Niveau 1' },
            { value: 'niveau2', text: 'Niveau 2' },
            { value: 'niveau3', text: 'Niveau 3' },
            { value: 'niveau4', text: 'Niveau 4' },
            { value: 'niveau5', text: 'Niveau 5' },
            { value: 'instructeur', text: 'Instructeur' },
            { value: 'moniteur', text: 'Moniteur' }
        ],
        'certificat_medical': [
            { value: 'oui', text: 'Oui' },
            { value: 'non', text: 'Non' }
        ],
        'assurance': [
            { value: 'oui', text: 'Oui' },
            { value: 'non', text: 'Non' }
        ],
        'experience_plongee': [
            { value: '0-10', text: '0-10 plongées' },
            { value: '11-50', text: '11-50 plongées' },
            { value: '51-100', text: '51-100 plongées' },
            { value: '100+', text: '100+ plongées' }
        ]
    };
    
    // Populate options based on selected attribute
    if (selectedAttribute && attributeOptions[selectedAttribute]) {
        attributeOptions[selectedAttribute].forEach(option => {
            const optionElement = document.createElement('option');
            optionElement.value = option.value;
            optionElement.textContent = option.text;
            {% if event.requiredValue is defined %}
            if (option.value === '{{ event.requiredValue ?? "" }}') {
                optionElement.selected = true;
            }
            {% endif %}
            requiredValueSelect.appendChild(optionElement);
        });
    }
});

// Handle automatic date/time filling
document.getElementById('start_date').addEventListener('change', function() {
    const endDateField = document.getElementById('end_date');
    // If end date is empty, set it to same as start date
    if (!endDateField.value) {
        endDateField.value = this.value;
    }
});

document.getElementById('club_departure_time').addEventListener('change', function() {
    const dockTimeField = document.getElementById('dock_departure_time');
    // If dock time is empty, set it to club time + 1 hour
    if (!dockTimeField.value && this.value) {
        const clubTime = this.value.split(':');
        const clubHour = parseInt(clubTime[0]);
        const clubMinute = parseInt(clubTime[1]);
        
        let dockHour = clubHour + 1;
        if (dockHour >= 24) dockHour = 0;
        
        const dockTime = String(dockHour).padStart(2, '0') + ':' + String(clubMinute).padStart(2, '0');
        dockTimeField.value = dockTime;
    }
});

</script>
{% endblock %}