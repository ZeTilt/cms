{% extends 'admin/base.html.twig' %}

{% block title %}Events Calendar - ZeTilt CMS{% endblock %}

{% block content %}
<div class="w-[95%] mx-auto py-6 px-4 sm:px-6 lg:px-8">
    <div class="mb-6">
        <div class="flex justify-between items-center">
            <div>
                <h1 class="text-3xl font-bold text-gray-900">Events Calendar</h1>
                <p class="mt-1 text-sm text-gray-500">Visual calendar view of all events</p>
            </div>
            <div class="flex space-x-3">
                <a href="{{ path('admin_events_list') }}" 
                   class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                    <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                    </svg>
                    List View
                </a>
                <a href="{{ path('admin_events_new') }}" 
                   class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700">
                    <svg class="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                    New Event
                </a>
            </div>
        </div>
    </div>

    <!-- Calendar Navigation -->
    <div class="bg-white shadow rounded-lg mb-6">
        <div class="px-6 py-4 border-b border-gray-200">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <button id="prevMonth" class="p-2 text-gray-400 hover:text-gray-600">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                        </svg>
                    </button>
                    <h2 id="currentMonth" class="text-xl font-semibold text-gray-900"></h2>
                    <button id="nextMonth" class="p-2 text-gray-400 hover:text-gray-600">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                        </svg>
                    </button>
                </div>
                <div class="flex items-center space-x-2">
                    <button id="todayBtn" class="px-3 py-1 text-sm font-medium text-indigo-600 hover:text-indigo-500">
                        {{ 'calendar.today'|trans({}, 'events') }}
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Calendar Grid -->
        <div class="p-6">
            <div id="calendarGrid" class="grid grid-cols-7 gap-px bg-gray-200 rounded-lg overflow-hidden">
                <!-- Day Headers -->
                <div class="bg-gray-50 py-2 px-3 text-xs font-medium text-gray-500 text-center">Dim</div>
                <div class="bg-gray-50 py-2 px-3 text-xs font-medium text-gray-500 text-center">Lun</div>
                <div class="bg-gray-50 py-2 px-3 text-xs font-medium text-gray-500 text-center">Mar</div>
                <div class="bg-gray-50 py-2 px-3 text-xs font-medium text-gray-500 text-center">Mer</div>
                <div class="bg-gray-50 py-2 px-3 text-xs font-medium text-gray-500 text-center">Jeu</div>
                <div class="bg-gray-50 py-2 px-3 text-xs font-medium text-gray-500 text-center">Ven</div>
                <div class="bg-gray-50 py-2 px-3 text-xs font-medium text-gray-500 text-center">Sam</div>
                
                <!-- Calendar Days will be generated by JavaScript -->
            </div>
        </div>
    </div>

    <!-- Event Legend -->
    <div class="bg-white shadow rounded-lg">
        <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">{{ 'calendar.legend_title'|trans({}, 'events') }}</h3>
        </div>
        <div class="px-6 py-4">
            <div class="flex flex-wrap gap-4">
                {% for eventType in eventTypes %}
                <div class="flex items-center">
                    <div class="w-3 h-3 rounded-full mr-2" style="background-color: {{ eventType.color }};"></div>
                    <span class="text-sm text-gray-700">{{ eventType.name }}</span>
                </div>
                {% endfor %}
                <div class="flex items-center">
                    <div class="w-3 h-3 bg-gray-300 rounded-full mr-2"></div>
                    <span class="text-sm text-gray-700">{{ 'calendar.event_type_other'|trans({}, 'events') }}</span>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Event Details Modal -->
<div id="eventModal" class="fixed inset-0 z-10 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        
        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="mt-3 text-center sm:mt-0 sm:text-left">
                    <h3 class="text-lg leading-6 font-medium text-gray-900" id="modalTitle">
                        Event Details
                    </h3>
                    <div class="mt-2">
                        <div id="modalContent" class="text-sm text-gray-500">
                            <!-- Event details will be populated here -->
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button type="button" 
                        id="editEventBtn"
                        class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm">
                    Edit Event
                </button>
                <button type="button" 
                        onclick="hideEventModal()"
                        class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<script>
// Events data from server
const events = {{ events|json_encode|raw }};
const eventTypes = {{ eventTypes|json_encode|raw }};

// Translations for JavaScript use
const translations = {
    status: "{{ 'javascript.status'|trans({}, 'events') }}",
    start: "{{ 'javascript.start'|trans({}, 'events') }}",
    end: "{{ 'javascript.end'|trans({}, 'events') }}",
    location: "{{ 'javascript.location'|trans({}, 'events') }}",
    description: "{{ 'javascript.description'|trans({}, 'events') }}",
    max_participants: "{{ 'javascript.max_participants'|trans({}, 'events') }}"
};

let currentDate = new Date();
let currentMonth = currentDate.getMonth();
let currentYear = currentDate.getFullYear();

const months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
];

function updateCalendar() {
    const monthYear = `${months[currentMonth]} ${currentYear}`;
    document.getElementById('currentMonth').textContent = monthYear;
    
    renderCalendarDays();
}

function renderCalendarDays() {
    const calendarGrid = document.getElementById('calendarGrid');
    
    // Clear all day cells but keep the header row (first 7 elements)
    const dayElements = calendarGrid.querySelectorAll('div:nth-child(n+8)');
    dayElements.forEach(element => element.remove());
    
    const firstDay = new Date(currentYear, currentMonth, 1);
    const lastDay = new Date(currentYear, currentMonth + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());
    
    const endDate = new Date(lastDay);
    endDate.setDate(endDate.getDate() + (6 - lastDay.getDay()));
    
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {
        const dayElement = document.createElement('div');
        dayElement.className = 'bg-white min-h-20 p-2 relative';
        
        const dayNumber = document.createElement('div');
        dayNumber.className = 'text-sm font-medium mb-1';
        
        const currentDate = new Date(date);
        currentDate.setHours(0, 0, 0, 0);
        
        if (date.getMonth() !== currentMonth) {
            dayNumber.className += ' text-gray-400';
        } else {
            dayNumber.className += ' text-gray-900';
        }
        
        if (currentDate.getTime() === today.getTime()) {
            dayNumber.className = dayNumber.className.replace('text-gray-900', 'text-white');
            dayNumber.className += ' bg-blue-500 rounded-full w-6 h-6 flex items-center justify-center text-xs';
        }
        
        dayNumber.textContent = date.getDate();
        dayElement.appendChild(dayNumber);
        
        // Add events for this day
        const dayEvents = getEventsForDay(date);
        dayEvents.forEach(event => {
            const eventElement = document.createElement('div');
            const eventType = event.type || 'other';
            eventElement.className = `text-xs p-1 mb-1 rounded cursor-pointer truncate ${getEventColor(eventType)}`;
            eventElement.textContent = event.title;
            eventElement.title = event.title; // Tooltip for long titles
            eventElement.onclick = () => showEventModal(event);
            dayElement.appendChild(eventElement);
        });
        
        calendarGrid.appendChild(dayElement);
    }
}

function getEventsForDay(date) {
    return events.filter(event => {
        // Handle different date formats that might come from Symfony
        let eventDate;
        if (event.startDate) {
            if (typeof event.startDate === 'string') {
                eventDate = new Date(event.startDate);
            } else if (event.startDate.date) {
                // Handle DateTime object format from Symfony
                eventDate = new Date(event.startDate.date);
            } else {
                eventDate = new Date(event.startDate);
            }
        } else {
            return false;
        }
        
        return eventDate.toDateString() === date.toDateString();
    });
}

function getEventColor(type) {
    // Find event type configuration
    const eventType = eventTypes.find(et => et.slug === type);
    
    if (eventType) {
        // Convert hex color to Tailwind classes
        const color = eventType.color;
        switch(color) {
            case '#3B82F6': return 'bg-blue-100 text-blue-800 hover:bg-blue-200 border-l-4 border-blue-500';
            case '#10B981': return 'bg-green-100 text-green-800 hover:bg-green-200 border-l-4 border-green-500';
            case '#F59E0B': return 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200 border-l-4 border-yellow-500';
            case '#EF4444': return 'bg-red-100 text-red-800 hover:bg-red-200 border-l-4 border-red-500';
            default: return 'bg-purple-100 text-purple-800 hover:bg-purple-200 border-l-4 border-purple-500';
        }
    }
    
    // Fallback for unknown types
    return 'bg-gray-100 text-gray-800 hover:bg-gray-200 border-l-4 border-gray-400';
}

function showEventModal(event) {
    document.getElementById('modalTitle').textContent = event.title;
    
    // Handle date formatting
    const formatDate = (dateValue) => {
        if (!dateValue) return '';
        let date;
        if (typeof dateValue === 'string') {
            date = new Date(dateValue);
        } else if (dateValue.date) {
            date = new Date(dateValue.date);
        } else {
            date = new Date(dateValue);
        }
        return date.toLocaleString('fr-FR');
    };
    
    const content = `
        <div class="space-y-2">
            <p><strong>${translations.status}:</strong> ${event.status || 'draft'}</p>
            <p><strong>Type:</strong> ${event.type || 'event'}</p>
            ${event.startDate ? `<p><strong>${translations.start}:</strong> ${formatDate(event.startDate)}</p>` : ''}
            ${event.endDate ? `<p><strong>${translations.end}:</strong> ${formatDate(event.endDate)}</p>` : ''}
            ${event.location ? `<p><strong>${translations.location}:</strong> ${event.location}</p>` : ''}
            ${event.shortDescription ? `<p><strong>${translations.description}:</strong> ${event.shortDescription}</p>` : ''}
            ${event.description ? `<p><strong>${translations.description}:</strong> ${event.description}</p>` : ''}
        </div>
    `;
    
    document.getElementById('modalContent').innerHTML = content;
    document.getElementById('editEventBtn').onclick = () => {
        window.location.href = `/admin/events/${event.id}/edit`;
    };
    
    document.getElementById('eventModal').classList.remove('hidden');
}

function hideEventModal() {
    document.getElementById('eventModal').classList.add('hidden');
}

// Navigation event listeners
document.getElementById('prevMonth').addEventListener('click', () => {
    currentMonth--;
    if (currentMonth < 0) {
        currentMonth = 11;
        currentYear--;
    }
    updateCalendar();
});

document.getElementById('nextMonth').addEventListener('click', () => {
    currentMonth++;
    if (currentMonth > 11) {
        currentMonth = 0;
        currentYear++;
    }
    updateCalendar();
});

document.getElementById('todayBtn').addEventListener('click', () => {
    const today = new Date();
    currentMonth = today.getMonth();
    currentYear = today.getFullYear();
    updateCalendar();
});

// Initialize calendar
updateCalendar();
</script>
{% endblock %}