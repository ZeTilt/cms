{% if should_show_language_selector() %}
    <div class="relative inline-block text-left" id="language-selector">
        <div>
            <button 
                type="button" 
                id="language-selector-button"
                class="inline-flex items-center justify-center w-full rounded-md border border-gray-300 shadow-sm px-3 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                aria-expanded="false" 
                aria-haspopup="true">
                <span class="text-lg mr-2">{{ get_locale_flag(get_current_locale()) }}</span>
                <span class="hidden sm:inline">{{ get_locale_name(get_current_locale()) }}</span>
                <svg class="-mr-1 ml-2 h-5 w-5 transition-transform duration-200" id="language-selector-chevron" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
            </button>
        </div>

        <div 
            id="language-selector-menu"
            class="hidden origin-top-right absolute w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-[9999] transition-all duration-200 opacity-0 scale-95"
            role="menu" 
            aria-orientation="vertical" 
            aria-labelledby="language-selector-button" 
            tabindex="-1">
            <div class="py-1" role="none">
                {% for locale in get_supported_locales() %}
                    <a href="{{ path('app_language_switch', {'locale': locale}) }}" 
                       class="group flex items-center px-4 py-2 text-sm {{ get_current_locale() == locale ? 'bg-indigo-50 text-indigo-700' : 'text-gray-700 hover:bg-gray-100' }}"
                       role="menuitem" 
                       tabindex="-1">
                        <span class="text-lg mr-3">{{ get_locale_flag(locale) }}</span>
                        <span>{{ get_locale_name(locale) }}</span>
                        {% if get_current_locale() == locale %}
                            <svg class="ml-auto h-4 w-4 text-indigo-600" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                            </svg>
                        {% endif %}
                    </a>
                {% endfor %}
            </div>
        </div>
    </div>

    <!-- Language Selector JavaScript -->
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const languageSelector = document.getElementById('language-selector');
        const button = document.getElementById('language-selector-button');
        const menu = document.getElementById('language-selector-menu');
        const chevron = document.getElementById('language-selector-chevron');
        
        if (!languageSelector || !button || !menu || !chevron) {
            return;
        }
        
        let isOpen = false;
        
        function calculatePosition() {
            const buttonRect = button.getBoundingClientRect();
            const menuWidth = 224; // w-56 = 14rem = 224px
            const menuHeight = menu.offsetHeight || 200; // Estimation si pas encore affiché
            const viewportWidth = window.innerWidth;
            const viewportHeight = window.innerHeight;
            const scrollX = window.scrollX;
            const scrollY = window.scrollY;
            
            // Calcul position horizontale
            let left, right;
            if (buttonRect.right + menuWidth > viewportWidth) {
                // Le menu dépasse à droite, l'aligner à droite du bouton
                right = 0;
                left = 'auto';
                menu.classList.remove('origin-top-left');
                menu.classList.add('origin-top-right');
            } else {
                // Assez de place à droite, l'aligner normalement
                left = 0;
                right = 'auto';
                menu.classList.remove('origin-top-right');
                menu.classList.add('origin-top-left');
            }
            
            // Calcul position verticale
            let top, bottom;
            if (buttonRect.bottom + menuHeight > viewportHeight) {
                // Le menu dépasse en bas, l'afficher au-dessus
                bottom = '100%';
                top = 'auto';
                menu.classList.remove('origin-top-right', 'origin-top-left');
                menu.classList.add(right === 0 ? 'origin-bottom-right' : 'origin-bottom-left');
            } else {
                // Assez de place en bas, l'afficher normalement
                top = '100%';
                bottom = 'auto';
            }
            
            // Appliquer les styles
            menu.style.left = left === 'auto' ? left : left + 'px';
            menu.style.right = right === 'auto' ? right : right + 'px';
            menu.style.top = top === 'auto' ? top : (top === '100%' ? 'calc(100% + 0.5rem)' : top);
            menu.style.bottom = bottom === 'auto' ? bottom : (bottom === '100%' ? 'calc(100% + 0.5rem)' : bottom);
        }
        
        function openMenu() {
            isOpen = true;
            button.setAttribute('aria-expanded', 'true');
            menu.classList.remove('hidden');
            
            // Calculer et appliquer la position
            calculatePosition();
            
            // Force reflow for transition
            menu.offsetHeight;
            menu.classList.remove('opacity-0', 'scale-95');
            menu.classList.add('opacity-100', 'scale-100');
            chevron.style.transform = 'rotate(180deg)';
        }
        
        function closeMenu() {
            isOpen = false;
            button.setAttribute('aria-expanded', 'false');
            menu.classList.remove('opacity-100', 'scale-100');
            menu.classList.add('opacity-0', 'scale-95');
            chevron.style.transform = 'rotate(0deg)';
            
            // Hide after transition
            setTimeout(() => {
                if (!isOpen) {
                    menu.classList.add('hidden');
                }
            }, 200);
        }
        
        function toggleMenu() {
            if (isOpen) {
                closeMenu();
            } else {
                openMenu();
            }
        }
        
        // Button click handler
        button.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            toggleMenu();
        });
        
        // Click outside to close
        document.addEventListener('click', function(e) {
            if (isOpen && !languageSelector.contains(e.target)) {
                closeMenu();
            }
        });
        
        // Escape key to close
        document.addEventListener('keydown', function(e) {
            if (isOpen && e.key === 'Escape') {
                closeMenu();
                button.focus();
            }
        });
        
        // Recalculate position on window resize
        window.addEventListener('resize', function() {
            if (isOpen) {
                calculatePosition();
            }
        });
    });
    </script>
{% endif %}